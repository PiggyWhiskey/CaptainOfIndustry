// Decompiled with JetBrains decompiler
// Type: Mafi.Base.Prototypes.Messages.TutorialMessagesData
// Assembly: Mafi.Base, Version=0.6.3.0, Culture=neutral, PublicKeyToken=null
// MVID: 189C759C-DBD6-48EA-AEF6-5D1D80F045F4
// Assembly location: D:\GameLibrary\SteamLibrary\steamapps\common\Captain of Industry\Captain of Industry_Data\Managed\Mafi.Base.dll
// XML documentation location: D:\GameLibrary\SteamLibrary\steamapps\common\Captain of Industry\Captain of Industry_Data\Managed\Mafi.Base.xml

using eLxG93FZl5M3yHxFGb;
using Mafi.Core;
using Mafi.Core.Buildings.Farms;
using Mafi.Core.Entities.Static;
using Mafi.Core.Messages;
using Mafi.Core.Mods;
using Mafi.Core.Products;
using Mafi.Core.Prototypes;
using Mafi.Localization;

#nullable disable
namespace Mafi.Base.Prototypes.Messages
{
  internal class TutorialMessagesData : IModData
  {
    private static string kb(string keyBindingId) => "<KB=" + keyBindingId + ">";

    public void RegisterData(ProtoRegistrator registrator)
    {
      ProtosDb prototypesDb = registrator.PrototypesDb;
      MessageGroupProto orThrow1 = prototypesDb.GetOrThrow<MessageGroupProto>(Ids.MessageGroups.Tools);
      MessageGroupProto orThrow2 = prototypesDb.GetOrThrow<MessageGroupProto>(Ids.MessageGroups.GettingStarted);
      MessageGroupProto orThrow3 = prototypesDb.GetOrThrow<MessageGroupProto>(Ids.MessageGroups.General);
      MessageGroupProto orThrow4 = prototypesDb.GetOrThrow<MessageGroupProto>(Ids.MessageGroups.FoodProduction);
      MessageGroupProto orThrow5 = prototypesDb.GetOrThrow<MessageGroupProto>(Ids.MessageGroups.Settlement);
      MessageGroupProto orThrow6 = prototypesDb.GetOrThrow<MessageGroupProto>(Ids.MessageGroups.Terraforming);
      MessageGroupProto orThrow7 = prototypesDb.GetOrThrow<MessageGroupProto>(Ids.MessageGroups.Logistics);
      MessageGroupProto orThrow8 = prototypesDb.GetOrThrow<MessageGroupProto>(Ids.MessageGroups.World);
      LocStr1 locStr1_1 = Loc.Str1("TreeHarvesting__part1", "To designate trees for harvesting, select the <b>tree designation tool</b> ({0} key) (1) and drag your cursor over a forest (2).", "{0} = 'key binding that open the tool'");
      LocStr1 locStr1_2 = Loc.Str1("TreeHarvesting__part2", "{0} will automatically start harvesting any designated trees. Click on the {0} and assign it at least one <b>truck</b> so it can unload the harvested wood.", "{0} = 'Tree harvester'");
      LocStr locStr1 = Loc.Str("TreeHarvesting__part3", "Once trucks are loaded with wood they will deliver it to a nearby storage or any machine that requires wood.", "");
      string content1 = string.Format("\r\n[STEP] {0}\r\n<IMAGE=Assets/Base/Tutorials/TreeHarvesting/Designation.jpg>\r\n\r\n[STEP] {1}\r\n<IMAGE=Assets/Base/Tutorials/TreeHarvesting/AssignTrucks.jpg>\r\n\r\n[STEP] {2}\r\n<DIMAGE=Assets/Base/Tutorials/TreeHarvesting/Final.jpg>\r\n", (object) locStr1_1.Format(TutorialMessagesData.kb("ToggleTreeHarvestingTool")), (object) locStr1_2.Format(Ids.Vehicles.TreeHarvesterT1.TranslatedName(prototypesDb).MakeBold()), (object) locStr1);
      prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialTreeHarvesting, "Tree harvesting", content1, InGameMessageType.Tutorial, unlockSilentlyFromStart: true, group: orThrow2));
      LocStr2 locStr2_1 = Loc.Str2("TutorialOnSmelting__part1", "The {0} allows smelting products such as ores and scrap into molten materials. The {1} can be used to cast molten materials to slabs.", "{0} = Blast furnace, {1} = Metal caster");
      LocStr2 locStr2_2 = Loc.Str2("TutorialOnSmelting__part2", "In order to produce <b>iron plate</b> you can use {0} gathered from the abandoned buildings nearby. Later on you will be able to set up a mining operation to smelt {1} directly.", "{0} = Iron scrap, {1} = Iron ore");
      LocStr3 locStr3_1 = Loc.Str3("TutorialOnSmelting__part3", "Build a {0} and 2x {1}. Connect them together using {2}. The molten channels are needed since the molten iron is too hot to be transported by trucks.", "{0} = Blast furnace, {1} = Metal caster, {2} - molten channel");
      LocStr2 locStr2_3 = Loc.Str2("TutorialOnSmelting__part4", "Build and attach a {0} to the {1} either directly or via pipe (which can be found in the <b>transports</b> category).", "{0} = Smoke stack, {1} = Blast furnace");
      LocStr4 locStr4_1 = Loc.Str4("TutorialOnSmelting__part6", "Since you don’t have access to coal mining yet, build a {0} to produce <b>coal</b> from wood. Don’t forget to attach a {1} to it as well. You can even share the same {1} which is used for {2}. To learn how to get <b>wood</b>, read the tutorial for {3}.", "{0} = Coal maker, {1} = Smoke stack, {2} = Blast furnace, {3} = Tree harvesting");
      LocStr2 locStr2_4 = Loc.Str2("TutorialOnSmelting__part7", "Watch the furnace recipe in progress whilst trucks automatically supply it with {0} and coal. Iron slabs produced in a {1} will be stored there until trucks can find a place for them to be delivered. Later, you will be able to unlock and build conveyor belts to deliver iron directly to your production buildings or storage.", "{0} = Iron scrap, {1} = Metal caster");
      string content2 = string.Format("\r\n{0}\r\n\r\n{1}\r\n\r\n[STEP] {2}\r\n<IMAGE=Assets/Base/Tutorials/IronScrapSmelting/Overview.jpg>\r\n\r\n[STEP] {3}\r\n<IMAGE=Assets/Base/Tutorials/IronScrapSmelting/SmokeStack.jpg>\r\n\r\n[STEP] {4}\r\n<IMAGE=Assets/Base/Tutorials/IronScrapSmelting/Coal.jpg>\r\n\r\n[STEP] {5}\r\n<DIMAGE=Assets/Base/Tutorials/IronScrapSmelting/Final.jpg>\r\n", (object) locStr2_1.Format(Ids.Machines.SmeltingFurnaceT1.TranslatedName(prototypesDb).MakeBold(), Ids.Machines.Caster.TranslatedName(prototypesDb).MakeBold()), (object) locStr2_2.Format(Ids.Products.IronScrap.TranslatedName(prototypesDb).MakeBold(), Ids.Products.IronOre.TranslatedName(prototypesDb).MakeBold()), (object) locStr3_1.Format(Ids.Machines.SmeltingFurnaceT1.TranslatedName(prototypesDb).MakeBold() + " (1)", Ids.Machines.Caster.TranslatedName(prototypesDb).MakeBold() + " (2)", Ids.Transports.MoltenMetalChannel.TranslatedName(prototypesDb).MakeBold() + " (3)"), (object) locStr2_3.Format(Ids.Machines.SmokeStack.TranslatedName(prototypesDb).MakeBold(), Ids.Machines.SmeltingFurnaceT1.TranslatedName(prototypesDb).MakeBold()), (object) locStr4_1.Format(Ids.Machines.CharcoalMaker.TranslatedName(prototypesDb).MakeBold(), Ids.Machines.SmokeStack.TranslatedName(prototypesDb).MakeBold(), Ids.Machines.SmeltingFurnaceT1.TranslatedName(prototypesDb).MakeBold(), IdsCore.Messages.TutorialTreeHarvesting.TranslatedName(prototypesDb).MakeBold()), (object) locStr2_4.Format(Ids.Products.IronScrap.TranslatedName(prototypesDb), Ids.Machines.Caster.TranslatedName(prototypesDb).MakeBold()));
      prototypesDb.Add<MessageProto>(new MessageProto(Ids.Messages.TutorialOnFurnace, "Iron Scrap smelting", content2, InGameMessageType.Tutorial, unlockSilentlyFromStart: true, group: orThrow2));
      LocStr locStr2 = Loc.Str("TutorialOnTreesPlanting__part1", "Tree planting provides a renewable source of wood. To start, you need to obtain <b>tree saplings</b> by growing them on <b>farms</b>.", "");
      LocStr3 locStr3_2 = Loc.Str3("TutorialOnTreesPlanting__part2", "A {0} is required to designate tree replanting zones. It has an area which is the working space where the assigned vehicles will operate. It can be changed similarly as in {2}. To plant & harvest trees, you need to place forestry designations inside the area by clicking on {1}.", "{0} - Forestry Control Tower, {1} - Edit designation, {2} - Mine tower");
      LocStr2 locStr2_5 = Loc.Str2("TutorialOnTreesPlanting__part3", "You also need to build a vehicle called {0} and assign it to the {1}. Once tree saplings are available, the {0} automatically picks them up and plants them onto the designations.", "{0} - Tree planter, {1} - Forestry Control Tower");
      LocStr locStr3 = Loc.Str("TutorialOnTreesPlanting__part4", "Tree harvesters will automatically cut down fully grown trees as long as the trees are situated on tower’s designations.", "");
      LocStr1 locStr1_3 = Loc.Str1("TutorialOnTreesPlanting__part5", "You can also place trees manually to have them planted exactly where you want. The available types of trees can be found in the build menu. Manually placed trees are planted by the {0} as well.", "{0} - Tree planter");
      string content3 = string.Format("\r\n[STEP] {0}\r\n<IMAGE=Assets/Base/Tutorials/TreePlanting/TreeSapling.jpg>\r\n\r\n[STEP] {1}\r\n<IMAGE=Assets/Base/Tutorials/TreePlanting/EditDesignation.jpg>\r\n\r\n[STEP] {2}\r\n<IMAGE=Assets/Base/Tutorials/TreePlanting/AssignTreePlanter.jpg>\r\n\r\n{3}\r\n\r\n[ATTACH] {4}\r\n<IMAGE=Assets/Base/Tutorials/TreePlanting/ManualTreePlacement.jpg>\r\n", (object) locStr2.TranslatedString, (object) locStr3_2.Format(Ids.Buildings.ForestryTower.TranslatedName(prototypesDb).MakeBold(), TrCore.ManagedDesignation__EditAction.TranslatedString.MakeBold(), Ids.Buildings.MineTower.TranslatedName(prototypesDb)), (object) locStr2_5.Format(Ids.Vehicles.TreePlanterT1.TranslatedName(prototypesDb).MakeBold(), Ids.Buildings.ForestryTower.TranslatedName(prototypesDb).MakeBold()), (object) locStr3.TranslatedString, (object) locStr1_3.Format(Ids.Vehicles.TreePlanterT1.TranslatedName(prototypesDb).MakeBold()));
      MessageProto messageProto1 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnTreesPlanting, "Tree planting", content3, InGameMessageType.Tutorial, group: orThrow3));
      Mafi.Core.Prototypes.Proto orThrow9 = prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>((Mafi.Core.Prototypes.Proto.ID) Ids.Buildings.ForestryTower);
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto1, orThrow9));
      string content4 = string.Format("\r\n{0}\r\n\r\n<h>{1}</h>\r\n{2}\r\n\r\n{3}\r\n<IMAGE=Assets/Base/Tutorials/Farming/SoilWater.jpg>\r\n", (object) Loc.Str("TutorialOnFarming__part2", "Farms grow crops, and <b>crops</b> can be used in various places but mainly to feed your people. But crops don’t grow for free, they consume <b>water</b> and <b>fertility</b>.", ""), (object) Loc.Str("TutorialOnFarming__waterHeading", "Soil water level", ""), (object) Loc.Str("TutorialOnFarming__water", "Soil water level is replenished by rain and this is mostly sufficient for crops with low water demands (such as potatoes). However, rain is not a reliable water source and crops can yield less or even dry out and die when not having enough water.", ""), (object) Loc.Str("TutorialOnFarming__water2", "Having an external source of water is vital for reliable farming. This requires upgrading farms with irrigation systems (unlocked via research). <b>Irrigated Farms</b> only consume water when the soil gets dry so externally supplied water does not get wasted.", ""));
      MessageProto messageProto2 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnFarming, "Farming", content4, InGameMessageType.Tutorial, group: orThrow4));
      Mafi.Core.Prototypes.Proto orThrow10 = prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>((Mafi.Core.Prototypes.Proto.ID) Ids.Buildings.FarmT1);
      prototypesDb.Add<Mafi.Core.Prototypes.Proto>(new MessageTriggerOnProtoUnlockedProto(messageProto2, orThrow10).MarkAsObsolete());
      prototypesDb.Add<MessageTriggerOnEntityConstructedProto>(new MessageTriggerOnEntityConstructedProto(messageProto2, Ids.Buildings.FarmT1, "v2"));
      LocStr locStr4 = Loc.Str("TutorialOnFertility__part1", "Crop yield is based on <b>soil fertility</b>. If a farm has 50% soil fertility it will only have a 50% yield of products. Crops consume fertility as they grow but fertility is also naturally replenished over time (an empty farm would eventually reach 100% fertility).", "");
      LocStr locStr5 = Loc.Str("TutorialOnFertility__part2", "Note that soil fertility does not affect crop water consumption or growth duration. This means that crops growing on more fertile soil will not only yield more but also will be more water-efficient (greater yield for the same amount of water).", "");
      LocStr locStr6 = Loc.Str("TutorialOnFertility__part3", "Over time, crop fertility consumption and natural replenishment will stabilize at a value called <b>fertility equilibrium</b>. This value represents an <b>estimate of average soil fertility</b> based on the current growth schedule. The equilibrium exists because crop fertility consumption is constant but the natural replenishment speed increases as soil fertility gets lower.", "fertility equilibrium is an established term in the game, e.g. in FarmFertility__Equilibrium, please make sure to use it consistently");
      LocStr locStr7 = Loc.Str("TutorialOnFertility__rotationHeading", "Crop rotation", "");
      LocStr2 locStr2_6 = Loc.Str2("TutorialOnFertility__rotation1", "Growing the same crop more than once in a row will impose <b>{0} penalty</b> on fertility. This can be avoided by planting different crops in a crop rotation schedule. You can plant {1} which does not yield any useful products but helps to regenerate soil fertility and eliminates same-crop fertility penalty when planted between other crops.", "{0} - replaced with percentage (e.g. 50%), {1} - green manure");
      LocStr locStr8 = Loc.Str("TutorialOnFertility__rotation2", "You can also <b>leave the field empty</b> with no crop planted. This gives the soil time to regenerate fertility naturally but it won’t eliminate the same-crop fertility penalty on its own.", "");
      LocStr locStr9 = Loc.Str("TutorialOnFertility__fertilizersHeading", "Fertilizers", "");
      LocStr locStr10 = Loc.Str("TutorialOnFertility__fertilizers1", "Farmer’s biggest dream are fertilizers. They can increase the soil fertility beyond the natural equilibrium value, some even beyond 100%!", "");
      LocStr locStr11 = Loc.Str("TutorialOnFertility__fertilizers2", "To make fertilizers work, you need to connect a <b>pipe with fertilizer</b> product to the farm (1) and drag the <b>fertility target slider</b> (2) to the desired level. The farm will automatically fertilize the soil to the selected level. Note that each fertilizer type has its own maximum fertilization target which is displayed in the <b>Fertilizers Overview UI</b>.", "");
      LocStr locStr12 = Loc.Str("TutorialOnFertility__fertilizers3", "Note that the higher your soil fertilization target is the lower the natural replenishment is. And once fertility climbs above 100%, the natural replenishment will turn negative which will require even more fertilizer to sustain it.", "");
      string content5 = string.Format("\r\n{0}\r\n\r\n{1}\r\n<IMAGE=Assets/Base/Tutorials/FarmFertility/Fertility.jpg>\r\n\r\n{2}\r\n<IMAGE=Assets/Base/Tutorials/FarmFertility/Equilibrium.jpg>\r\n\r\n<h>{3}</h>\r\n{4}\r\n\r\n{5}\r\n<IMAGE=Assets/Base/Tutorials/FarmFertility/CropRotation.jpg>\r\n\r\n<h>{6}</h>\r\n{7}\r\n\r\n{8}\r\n<IMAGE=Assets/Base/Tutorials/FarmFertility/Fertilizer.jpg>\r\n\r\n{9}\r\n", (object) locStr4.TranslatedString, (object) locStr5.TranslatedString, (object) locStr6.TranslatedString, (object) locStr7.TranslatedString, (object) locStr2_6.Format(Farm.FERTILITY_PENALTY_FOR_SAME_CROP.ToStringRounded(), Ids.Crops.GreenManure.TranslatedName(prototypesDb).MakeBold()), (object) locStr8.TranslatedString, (object) locStr9.TranslatedString, (object) locStr10.TranslatedString, (object) locStr11.TranslatedString, (object) locStr12.TranslatedString);
      MessageProto messageProto3 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnFarmFertility, "Farm fertility", content5, InGameMessageType.Tutorial, group: orThrow4));
      Mafi.Core.Prototypes.Proto orThrow11 = prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>(IdsCore.Technology.CropRotation);
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto3, orThrow11));
      string content6 = string.Format("\r\n{0}\r\n\r\n<IMAGE=Assets/Base/Tutorials/PopsHealth/HealthWindow.jpg>\r\n\r\n<h>{1}</h>\r\n{2}\r\n<DIMAGE=Assets/Base/Tutorials/PopsHealth/HealthPositiveEffects.jpg>\r\n\r\n<h>{3}</h>\r\n{4}\r\n<DIMAGE=Assets/Base/Tutorials/PopsHealth/PollutionSplit.jpg>\r\n\r\n{5}\r\n<IMAGE=Assets/Base/Tutorials/PopsHealth/LiquidPumpPollution.jpg>\r\n\r\n<h>{6}</h>\r\n{7}\r\n\r\n{8}\r\n<DIMAGE=Assets/Base/Tutorials/PopsHealth/Clinic.jpg>\r\n", (object) Loc.Str("TutorialOnHealth__part1", "Your population has health. If health is positive, your population grows and provides you with extra unity. If health goes negative, your population starts to decline.", ""), (object) Loc.Str("TutorialOnHealth__part2Heading", "Positive effects", ""), (object) Loc.Str("TutorialOnHealth__part2", "You can increase your population's health by providing them with a variety of food, water, and healthcare.", ""), (object) Loc.Str("TutorialOnHealth__part3Heading", "Negative effects", ""), (object) Loc.Str("TutorialOnHealth__part3", "Your population's health decreases if you emit pollution (air or water). Pollution on your island is global, so moving smoke stacks farther from your settlement won’t help. It is a good idea to keep your eye on how much pollution you emit.", ""), (object) Loc.Str("TutorialOnHealth__part4", "When something emits pollution, it is displayed in the right side of the recipe UI as shown below.", ""), (object) Loc.Str("TutorialOnHealth__part5Heading", "Diseases", ""), (object) Loc.Str("TutorialOnHealth__part5a", "Your population can suffer from diseases. There are diseases that just come and go and it is not possible to completely prevent them from happening. Providing healthcare can significantly reduce their negative impact.", ""), (object) Loc.Str("TutorialOnHealth__part5b", "There are also diseases that can occur due to bad conditions in your settlement, for instance lack of clean water or too much trash. There are no diseases from pollution as pollution gives a health penalty directly.", ""));
      MessageProto messageProto4 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnHealth, "Health & pollution", content6, InGameMessageType.Tutorial, group: orThrow5));
      Mafi.Core.Prototypes.Proto orThrow12 = prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>((Mafi.Core.Prototypes.Proto.ID) Ids.Machines.BasicDieselDistiller);
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto4, orThrow12));
      LocStr locStr13 = Loc.Str("TutorialOnCrisis__part1", "From time to time, your island might get into a crisis – fuel running out, no power, low maintenance, etc. Obviously, it is never your fault. It’s always caused by the people on the island doing a bad job. However, there are ways to avoid some of the issues early on.", "");
      LocStr locStr14 = Loc.Str("TutorialOnCrisis__part2Heading", "Pinning important products", "");
      LocStr locStr15 = Loc.Str("TutorialOnCrisis__part2", "You can pin / unpin products you would like to monitor in your right side panel. By clicking on this panel it will open your global statistics which showcases inventory across your island. Click on the pin icon to keep this product shown at all times.", "");
      LocStr locStr16 = Loc.Str("TutorialOnCrisis__part3Heading", "Storage alerts", "");
      LocStr1 locStr1_4 = Loc.Str1("TutorialOnCrisis__part3", "It is recommended to set up storage alerts for products like {0} or products that are critical for maintenance or settlement services. Getting notified early on gives you time to react. You can also set up dedicated storages, fill them with emergency supplies and disable truck export. This way, you have emergency supplies whenever you need them.", "");
      LocStr locStr17 = Loc.Str("TutorialOnCrisis__part4Heading", "Priority system", "");
      LocStr locStr18 = Loc.Str("TutorialOnCrisis__part4", "Most of your machines and buildings are assigned a priority. The lower the number the higher the priority is and the more likely they get power, unity, workers, maintenance and more. So having the most critical infrastructure on an increased priority is a great way to go.", "");
      LocStr locStr19 = Loc.Str("TutorialOnCrisis__part5Heading", "Power crisis management", "");
      LocStr locStr20 = Loc.Str("TutorialOnCrisis__part5", "Running out of power is no fun and there are several ways to avoid that. The first step is to set up alerts for storages that feed power-making machines, for example, coal and water storage that feed boilers used to produce steam for generators. This way, you know that coal or water are getting low before the power supply halts entirely.", "");
      LocStr1 locStr1_5 = Loc.Str1("TutorialOnCrisis__part6V2", "You can also give an increased priority to a storage that feeds your power plant. You must first have the <b>{0} slider</b> (1) moved away from the default location or you will not see the <b>priority selection screen</b> (2). ", "{0} - keep full");
      LocStr locStr21 = Loc.Str("TutorialOnCrisis__part7a", "The most robust but expensive setup is to have a backup plant like in the real world. This can, for instance, be an array of diesel generators that are ready to kick in when power drops.", "");
      LocStr1 locStr1_6 = Loc.Str1("TutorialOnCrisis__part7b", "This works by default because a {0} has lower production priority than standard generators connected to turbines. You can reconfigure power generation priority for any power generator yourself. Note that machines consume less maintenance when they are idle.", "{0} - Diesel generator");
      LocStr1 locStr1_7 = Loc.Str1("TutorialOnCrisis__part8V2", "In case of the worst emergency, you can also boost a machine. Boost enables machines to work without power at the monthly cost of {0}.", "{0} - Unity");
      string content7 = string.Format("\r\n{0}\r\n\r\n<h>{1}</h>\r\n{2}\r\n\r\n<IMAGE=Assets/Base/Tutorials/CrisisManagement/Pinning.jpg>\r\n\r\n<h>{3}</h>\r\n{4}\r\n\r\n<IMAGE=Assets/Base/Tutorials/CrisisManagement/Alerts.jpg>\r\n\r\n<h>{5}</h>\r\n{6}\r\n\r\n<IMAGE=Assets/Base/Tutorials/CrisisManagement/PumpPriority.jpg>\r\n\r\n<h>{7}</h>\r\n{8}\r\n\r\n<IMAGE=Assets/Base/Tutorials/CrisisManagement/Alert.jpg>\r\n\r\n{9}\r\n\r\n<IMAGE=Assets/Base/Tutorials/CrisisManagement/StoragePriority.jpg>\r\n\r\n{10}\r\n\r\n<DIMAGE=Assets/Base/Tutorials/CrisisManagement/DieselBackup.jpg>\r\n\r\n{11}\r\n\r\n<IMAGE=Assets/Base/Tutorials/CrisisManagement/PowerPriority.jpg>\r\n\r\n{12}\r\n\r\n<IMAGE=Assets/Base/Tutorials/CrisisManagement/Boost.jpg>\r\n", (object) locStr13, (object) locStr14, (object) locStr15, (object) locStr16, (object) locStr1_4.Format(Ids.Products.Diesel.TranslatedName(prototypesDb)), (object) locStr17, (object) locStr18, (object) locStr19, (object) locStr20, (object) locStr1_5.Format(TrCore.StoredProduct__KeepFull), (object) locStr21, (object) locStr1_6.Format(Ids.Machines.DieselGenerator.TranslatedName(prototypesDb)), (object) locStr1_7.Format(TrCore.Unity));
      MessageProto messageProto5 = prototypesDb.Add<MessageProto>(new MessageProto(Ids.Messages.TutorialOnCrisis, "Crisis management", content7, InGameMessageType.Tutorial, group: orThrow3));
      Mafi.Core.Prototypes.Proto orThrow13 = prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>((Mafi.Core.Prototypes.Proto.ID) Ids.Machines.BoilerCoal);
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto5, orThrow13));
      LocStr locStr22 = Loc.Str("TutorialOnCopyTool__part1", "This tool allows you to select one or more buildings to copy and place elsewhere. This allows you to effortlessly copy existing factory designs to scale your production.", "");
      LocStr2 locStr2_7 = Loc.Str2("TutorialOnCopyTool__part2", "To copy several buildings at once, press {0} or click the icon in the toolbar (1) to select the <b>copy tool</b> then click and drag across the desired buildings (2) tool. Let go of the mouse button and drag to where you want to place your copied buildings and left click once to place (3). You can <b>copy a single building</b> by hovering over it and pressing {1}.", "{0}, {1} = shortcut keys");
      LocStr1 locStr1_8 = Loc.Str1("TutorialOnCopyTool__part3", "This tool copies configurations of buildings by default. You can hold the {0} while placing a building to prevent it from copying the configuration. Copies buildings will be constructed as new ones. ", "{0} shortcut key");
      string content8 = string.Format("\r\n{0}\r\n\r\n{1}\r\n<IMAGE=Assets/Base/Tutorials/ToolsCopy/DragAndCopy.jpg>\r\n\r\n{2}\r\n", (object) locStr22.TranslatedString, (object) locStr2_7.Format(TutorialMessagesData.kb("ToggleCopyTool"), TutorialMessagesData.kb("ToggleInstaCopyTool")), (object) locStr1_8.Format(TutorialMessagesData.kb("CopyExcludingSettings")));
      MessageProto messageProto6 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnCopyTool, TrCore.CopyTool, content8, InGameMessageType.Tutorial, group: orThrow1));
      Mafi.Core.Prototypes.Proto orThrow14 = prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>(IdsCore.Technology.CopyTool);
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto6, orThrow14));
      string content9 = string.Format("\r\n{0}\r\n\r\n{1}\r\n\r\n<IMAGE=Assets/Base/Tutorials/ToolsCut/CutAndPaste.jpg>\r\n", (object) Loc.Str("TutorialOnCutTool__part1", "This tool is similar to the copy tool, but it removes the copied buildings. It only works for ghost buildings whose construction has not started yet.", "").TranslatedString, (object) Loc.Str2("TutorialOnCutTool__part2", "The tool can be activated by pressing {0} or by clicking the icon in the toolbar (1). You can also press {1} while hovering your cursor over a building to cut it instantly, which can be handy when making quick adjustments.", "{0}, {1} = shortcut keys").Format(TutorialMessagesData.kb("ToggleCutTool"), TutorialMessagesData.kb("ToggleInstaCutTool")));
      MessageProto messageProto7 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnCutTool, TrCore.CutTool, content9, InGameMessageType.Tutorial, group: orThrow1));
      Mafi.Core.Prototypes.Proto orThrow15 = prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>(IdsCore.Technology.CutTool);
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto7, orThrow15));
      string content10 = string.Format("\r\n{0}\r\n\r\n{1}\r\n\r\n<IMAGE=Assets/Base/Tutorials/ToolsPause/Drag.jpg>\r\n", (object) Loc.Str("TutorialOnPauseTool__part1", "This tool enables pausing and unpausing individual entities such as machines or vehicles. It also supports mass pausing / unpausing by dragging over an area.", "").TranslatedString, (object) Loc.Str1("TutorialOnPauseTool__part2", "The tool can be activated by pressing {0} or by clicking the icon in the toolbar (1). When you drag over an area with non-constructed buildings it will toggle the construction pause, otherwise, it will toggle the regular pause. If any entity in the selection is paused, it unpauses everything selected, otherwise, it pauses everything selected.", "{0} = key shortcut").Format(TutorialMessagesData.kb("TogglePauseTool")));
      MessageProto messageProto8 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnPauseTool, TrCore.PauseTool, content10, InGameMessageType.Tutorial, group: orThrow1));
      Mafi.Core.Prototypes.Proto orThrow16 = prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>(IdsCore.Technology.PauseTool);
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto8, orThrow16));
      string content11 = string.Format("\r\n{0}\r\n\r\n{1}\r\n\r\n<IMAGE=Assets/Base/Tutorials/ToolsCopySettings/PasteSettings.jpg>\r\n", (object) Loc.Str("TutorialOnCopySettings__part1", "This tool enables you to copy configuration from one building to another. You can even drag over multiple buildings to mass apply the selected configuration.", "").TranslatedString, (object) Loc.Str1("TutorialOnCopySettings__part2", "This tool can be activated by pressing {0} or by clicking the icon in the toolbar (1). Then click on the building you want to copy settings from (2). Finally click on or drag across as many other similar buildings to paste those settings (3).", "{0} = shortcut key").Format(TutorialMessagesData.kb("ToggleCloneConfigTool")));
      MessageProto messageProto9 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnCloneTool, TrCore.CloneTool, content11, InGameMessageType.Tutorial, group: orThrow1));
      Mafi.Core.Prototypes.Proto orThrow17 = prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>(IdsCore.Technology.CloneTool);
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto9, orThrow17));
      string content12 = string.Format("\r\n{0}\r\n\r\n{1}\r\n\r\n{2}\r\n<IMAGE=Assets/Base/Tutorials/ToolsUnity/Drag.jpg>\r\n", (object) Loc.Str("TutorialOnUnityTool__part1", "You can use unity to instantly deliver/remove products to/from construction in order to finish construction projects quickly.", "").TranslatedString, (object) Loc.Str("TutorialOnUnityTool__part2", "This tool enables you to drag over an area to order quick delivery/removal for all selected buildings. If there is no product delivery possible, this tool will act as a boost toggle.", "").TranslatedString, (object) Loc.Str1("TutorialOnUnityTool__part3", "The tool can be activated by pressing {0} or by clicking the icon in the toolbar (1). Then click and drag across the desired buildings (2).", "{0} = shortcut key").Format(TutorialMessagesData.kb("ToggleUnityTool")));
      MessageProto messageProto10 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnUnityTool, TrCore.UnityTool, content12, InGameMessageType.Tutorial, group: orThrow1));
      Mafi.Core.Prototypes.Proto orThrow18 = prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>(IdsCore.Technology.UnityTool);
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto10, orThrow18));
      LocStr1 locStr1_9 = Loc.Str1("TutorialOnTerDumping__part1", "To dump materials on the terrain, select the <b>dumping designation tool</b> {0} in the bottom toolbar (1). Hover over the terrain to see your starting direction and elevation of the tool (2). Left click and drag to create a dumping designation (3). Important is that <b>dump designations should start at or below terrain</b>, otherwise they cannot be accessed by trucks.", "{0} = key shortcut");
      LocStr locStr23 = Loc.Str("TutorialOnTerDumping__part2", "Dumping designations show what the terrain will look like when completed.", "");
      LocStr1 locStr1_10 = Loc.Str1("TutorialOnTerDumping__part3", "The {0} key will toggle the designation tool between a sloped designation (1) for placing terrain in an ascending / descending ramp and flat designation (2).", "{0} = key shortcut");
      LocStr1 locStr1_11 = Loc.Str1("TutorialOnTerDumping__part4", "The {0} key (1) will rotate ramp designations clockwise to choose which direction the slope will go. When snapped to another designation the {0} key just toggles the slope (2).", "{0} = key shortcut");
      LocStr2 locStr2_8 = Loc.Str2("TutorialOnTerDumping__part5", "The {0} and {1} keys (1) will raise (2) and lower (3) the designation respectively, allowing you to control the target height. Remember that dumping designations with all edges above the terrain cannot be accessed by trucks.", "{0} = key shortcut, {1} = key shortcut");
      LocStr locStr24 = Loc.Str("TutorialOnTerDumping__colorsDesc1", "The colored outlines on the designation squares lets you determine many things.", "");
      LocStr locStr25 = Loc.Str("TutorialOnTerDumping__colorsDesc2", "<b>light green square</b>: is accessible and will be used", "");
      LocStr locStr26 = Loc.Str("TutorialOnTerDumping__colorsDesc3", "<b>yellow green square with a red outline</b>: is not accessible yet", "");
      LocStr locStr27 = Loc.Str("TutorialOnTerDumping__colorsDesc4", "<b>darkened green square</b>: already fulfilled and will be ignored", "");
      LocStr locStr28 = Loc.Str("TutorialOnTerDumping__colorsDesc5", "The numbers on the designation indicate the height of the terrain level.", "");
      string str1 = string.Format("{0}<br>", (object) locStr24) + string.Format("(1) {0}<br>", (object) locStr25) + string.Format("(2) {0}<br>", (object) locStr26) + string.Format("(3) {0}<br>", (object) locStr27) + string.Format("{0}", (object) locStr28);
      LocStr locStr29 = Loc.Str("TutorialOnTerDumping__part7", "Trucks dump products automatically. If there is a dumpable product that needs to be disposed of and no machine or storage that accepts it, trucks will automatically navigate to the nearest designation to dump it.", "");
      LocStr locStr30 = Loc.Str("TutorialOnTerDumping__part8Heading", "What can be dumped", "");
      LocStr1 locStr1_12 = Loc.Str1("TutorialOnTerDumping__part8", "There are many products that can be dumped. If you are ever curious if a product can be dumped, open the <b>Recipes screen</b> {0} by clicking on the icon in the bottom right (1), navigate to the product (2), and check if dumping is an option for consumption (3).", "{0} = key shortcut");
      LocStr locStr31 = Loc.Str("TutorialOnTerDumping__part9Heading", "Global dump filters", "");
      LocStr2 locStr2_9 = Loc.Str2("TutorialOnTerDumping__part9", "Global dump filters choose what products can be dumped in designated areas across the island by default. For example, if you only wanted {0} and {1} used as dumping materials, you could remove any other products listed there besides those two.", "{0} = Dirt, {1} = Rock");
      LocStr1 locStr1_13 = Loc.Str1("TutorialOnTerDumping__part10Heading", "{0} dumping filter", "{0} = Mine control tower");
      LocStr2 locStr2_10 = Loc.Str2("TutorialOnTerDumping__part10", "The {0} has the option to filter what products can be dumped within its managed area. This managed area ignores the global dumping filter which is ideal for restricting what materials can be dumped. For example, you can only allow {1} to be dumped in a specific area by removing it from the global dumping filter and adding it to dumpable products in the {0} window.", "{0} = Mine control tower, {1} - waste");
      string content13 = string.Format("\r\n[ATTACH] {0}\r\n<IMAGE=Assets/Base/Tutorials/Dumping/Ramp.jpg>\r\n\r\n[ATTACH] {1}\r\n<DIMAGE=Assets/Base/Tutorials/Dumping/TerrainShape.jpg>\r\n\r\n[ATTACH] {2}\r\n<IMAGE=Assets/Base/Tutorials/Dumping/DumpingFlatAndRamp.jpg>\r\n\r\n[ATTACH] {3}\r\n<IMAGE=Assets/Base/Tutorials/Dumping/RotationAndSlope.jpg>\r\n\r\n[ATTACH] {4}\r\n<IMAGE=Assets/Base/Tutorials/Dumping/Elevation.jpg>\r\n\r\n[ATTACH] {5}\r\n<IMAGE=Assets/Base/Tutorials/Dumping/DumpingDesignation.jpg>\r\n\r\n[ATTACH] {6}\r\n<DIMAGE=Assets/Base/Tutorials/Dumping/DumpingOnCoast.jpg>\r\n\r\n<h>{7}</h>\r\n[ATTACH] {8}\r\n<IMAGE=Assets/Base/Tutorials/Dumping/WhatIsDumpable.jpg>\r\n\r\n<h>{9}</h>\r\n[ATTACH] {10}\r\n<IMAGE=Assets/Base/Tutorials/Dumping/DumpingGlobalRules.jpg>\r\n\r\n<h>{11}</h>\r\n[ATTACH] {12}\r\n<IMAGE=Assets/Base/Tutorials/Dumping/WasteDumping.jpg>\r\n", (object) locStr1_9.Format("[" + TutorialMessagesData.kb("ToggleDumpingTool") + "]"), (object) locStr23.TranslatedString, (object) locStr1_10.Format(TutorialMessagesData.kb("Flip")), (object) locStr1_11.Format(TutorialMessagesData.kb("Rotate")), (object) locStr2_8.Format(TutorialMessagesData.kb("RaiseUp"), TutorialMessagesData.kb("LowerDown")), (object) str1, (object) locStr29.TranslatedString, (object) locStr30.TranslatedString, (object) locStr1_12.Format("[" + TutorialMessagesData.kb("ToggleRecipesBook") + "]"), (object) locStr31.TranslatedString, (object) locStr2_9.Format(Ids.Products.Dirt.TranslatedName(prototypesDb), Ids.Products.Rock.TranslatedName(prototypesDb)), (object) locStr1_13.Format(Ids.Buildings.MineTower.TranslatedName(prototypesDb)), (object) locStr2_10.Format(Ids.Buildings.MineTower.TranslatedName(prototypesDb).MakeBold(), Ids.Products.Waste.TranslatedName(prototypesDb).MakeBold()));
      MessageProto messageProto11 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnDumping, "Dumping", content13, InGameMessageType.Tutorial, group: orThrow6));
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto11, prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>((Mafi.Core.Prototypes.Proto.ID) Ids.Buildings.MineTower)));
      LocStr locStr32 = Loc.Str("TutorialOnWasteDumping__part1", "Your population generates waste that needs to be collected to maintain healthy conditions in your settlement.", "");
      LocStr1 locStr1_14 = Loc.Str1("TutorialOnWasteDumping__part2", "Build a {0} and attach it to your settlement. It will automatically store waste generated by the settlement’s population.", "{0} = waste module");
      LocStr1 locStr1_15 = Loc.Str1("TutorialOnWasteDumping__part3a", "Set up dumping designations ({0}) anywhere on your island.", "{0} = key shortcut");
      LocStr2 locStr2_11 = Loc.Str2("TutorialOnWasteDumping__part3b", "Your trucks will automatically pick up waste from {0} and <b>dump it on the ground</b>. To learn more about dumping, see the {1} tutorial", "{0} = waste module, {1} = dumping tutorial name");
      LocStr locStr33 = Loc.Str("TutorialOnWasteDumping__part4", "Note that the amount of general waste your population produces depends on the amount of supply they get and whether they recycle. It is not possible to get rid of the general waste entirely, but later on you will be able to research more ways to deal with the waste.", "");
      string content14 = string.Format("\r\n[ATTACH] {0}\r\n<DIMAGE=Assets/Base/Tutorials/WasteDumping/Colony.jpg>\r\n\r\n[STEP] {1}\r\n<IMAGE=Assets/Base/Tutorials/WasteDumping/BuildCollection.jpg>\r\n\r\n[STEP] {2}\r\n<DIMAGE=Assets/Base/Tutorials/WasteDumping/Designate.jpg>\r\n\r\n[STEP] {3}\r\n<DIMAGE=Assets/Base/Tutorials/WasteDumping/Outro.jpg>\r\n\r\n[ATTACH] {4}\r\n<DIMAGE=Assets/Base/Tutorials/WasteDumping/BurningWaste.jpg>\r\n", (object) locStr32, (object) locStr1_14.Format(Ids.Buildings.SettlementLandfillModule.TranslatedName(prototypesDb).MakeBold()), (object) locStr1_15.Format(TutorialMessagesData.kb("ToggleDumpingTool")), (object) locStr2_11.Format(Ids.Buildings.SettlementLandfillModule.TranslatedName(prototypesDb), IdsCore.Messages.TutorialOnDumping.TranslatedName(prototypesDb).MakeBold()), (object) locStr33);
      MessageProto messageProto12 = prototypesDb.Add<MessageProto>(new MessageProto(Ids.Messages.TutorialOnWasteDumping, "Dumping waste", content14, InGameMessageType.Tutorial, group: orThrow5));
      prototypesDb.Add<MessageTriggerOnQuantityProducedProto>(new MessageTriggerOnQuantityProducedProto(messageProto12, prototypesDb.GetOrThrow<ProductProto>((Mafi.Core.Prototypes.Proto.ID) Ids.Products.Waste), 50.Quantity()));
      LocStr4 locStr4_2 = Loc.Str4("TutorialOnDiesel2__part1", "{0} can be produced by distilling {1} in the {2}. To extract {1}, build an {3} on top of an oil reservoir. When an {3} is selected for building, you will see black bars revealing locations of the oil reservoir.", "{0} = diesel, {1} = crude oil, {2} = basic distiller, {3} = oil pump");
      LocStr locStr34 = Loc.Str("TutorialOnDiesel2__part2", "The <b>resources overlay</b> can be also displayed at any time by toggling it in the bottom-left panel.", "");
      LocStr2 locStr2_12 = Loc.Str2("TutorialOnDiesel2__part3", "When production buildings are selected, icons showing input and output products will be displayed above the connection ports so you can determine where everything will go in and come out. Connect 3x {0} to a {1} using <b>pipes</b>.", "{0} = oil pump, {1} = basic distiller");
      LocStr1 locStr1_16 = Loc.Str1("TutorialOnDiesel2__part4", "There are limited underground supplies of {0} on the island. Later in the game you will be able to find additional {0} resources on the world map. In order to find them you will need to use your ship and explore the surroundings.", "{0} = crude oil");
      LocStr locStr35 = Loc.Str("TutorialOnDiesel2__part5Heading", "Waste products", "");
      LocStr4 locStr4_3 = Loc.Str4("TutorialOnDiesel2__part5", "Diesel production is not a clean process, it produces <b>{0}</b> and <b>{1}</b>. {1} can be released via a {2} and {0} can be dumped into the ocean with a {3}. Note that releasing pollutants to the environment will have negative effects on your population when done in large volumes.", "{0} = waste water, {1} = exhaust, {2} = Smoke stack, {3} = Liquid dump");
      string content15 = string.Format("\r\n[ATTACH] {0}\r\n<IMAGE=Assets/Base/Tutorials/DieselProduction/PlacePump.jpg>\r\n\r\n[ATTACH] {1}\r\n<IMAGE=Assets/Base/Tutorials/DieselProduction/Overlay.jpg>\r\n\r\n[ATTACH] {2}\r\n<IMAGE=Assets/Base/Tutorials/DieselProduction/PlacePipes.jpg>\r\n\r\n{3}\r\n\r\n<h>{4}</h>\r\n[ATTACH] {5}\r\n<IMAGE=Assets/Base/Tutorials/DieselProduction/LiquidWaste.jpg>\r\n", (object) locStr4_2.Format(Ids.Products.Diesel.TranslatedName(prototypesDb), Ids.Products.CrudeOil.TranslatedName(prototypesDb).MakeBold(), Ids.Machines.BasicDieselDistiller.TranslatedName(prototypesDb).MakeBold(), Ids.Machines.OilPump.TranslatedName(prototypesDb).MakeBold()), (object) locStr34.TranslatedString, (object) locStr2_12.Format(Ids.Machines.OilPump.TranslatedName(prototypesDb).MakeBold(), Ids.Machines.BasicDieselDistiller.TranslatedName(prototypesDb).MakeBold()), (object) locStr1_16.Format(Ids.Products.CrudeOil.TranslatedName(prototypesDb).MakeBold()), (object) locStr35.TranslatedString, (object) locStr4_3.Format(Ids.Products.WasteWater.TranslatedName(prototypesDb), Ids.Products.Exhaust.TranslatedName(prototypesDb), Ids.Machines.SmokeStack.TranslatedName(prototypesDb).MakeBold(), Ids.Machines.WasteDump.TranslatedName(prototypesDb).MakeBold()));
      MessageProto messageProto13 = prototypesDb.Add<MessageProto>(new MessageProto(Ids.Messages.TutorialOnDiesel, "Diesel production", content15, InGameMessageType.Tutorial, group: orThrow2));
      ProductQuantity productQuantityToTrigger = new ProductQuantity(prototypesDb.GetOrThrow<ProductProto>((Mafi.Core.Prototypes.Proto.ID) Ids.Products.Diesel), 100.Quantity());
      prototypesDb.Add<MessageTriggerOnEntityConstructedOrProductRunningOutProto>(new MessageTriggerOnEntityConstructedOrProductRunningOutProto(messageProto13, (StaticEntityProto.ID) Ids.Machines.BasicDieselDistiller, productQuantityToTrigger));
      LocStr locStr36 = Loc.Str("TutorialOnMining__part1", "You can remove any material from the terrain by mining it with your <b>excavators</b> and add material by dumping it with trucks.", "");
      LocStr2 locStr2_13 = Loc.Str2("TutorialOnMining__part2", "While dumping designations can be placed anywhere on the island, mining designations must be within a {0} managed area. With a mine control tower selected, click the {1} button to outline a new area.", "{0} = Mine control tower, {1} = Edit area");
      LocStr1 locStr1_17 = Loc.Str1("TutorialOnMining__part3", "Trucks and excavators must be <b>assigned to a {0}</b> in order for mining to begin. Excavators mine designated terrain while trucks transport the mined materials from the excavators to machines, storages, or any available dumping areas.", "{0} = Mine control tower");
      LocStr locStr37 = Loc.Str("TutorialOnMining__part4Header", "Mining designations", "");
      LocStr1 locStr1_18 = Loc.Str1("TutorialOnMining__part4", "To mine the terrain, select the <b>mine designation tool</b> {0} from the bottom toolbar (1), and click and drag on the terrain to designate your mining area (2).", "{0} = shortcut key");
      LocStr locStr38 = Loc.Str("TutorialOnMining__part5", "Designations denote how the terrain will be shaped after mining.", "");
      LocStr2 locStr2_14 = Loc.Str2("TutorialOnMining__part6", "This tool behaves the same as the <b>dumping designating tool</b>. {0} will toggle between <b>flat</b> or  <b>ramp</b> designations. Pressing {1} will toggle the ramp direction either <b>up</b> or <b>down</b> when placing beside another designation.", "{0} = shortcut key, {1} = shortcut key");
      LocStr2 locStr2_15 = Loc.Str2("TutorialOnMining__part7", "Move the height up or down using {0} and {1} respectively.", "{0} = shortcut key, {1} = shortcut key");
      LocStr1 locStr1_19 = Loc.Str1("TutorialOnMining__part8", "Rotate the ramp direction using {0}.", "{0} = shortcut key");
      LocStr locStr39 = Loc.Str("TutorialOnMining__part9", "Mining designations <b>have to start at or above the terrain</b>, otherwise, they won’t be reachable by your excavators. If an edge of designation is not reachable, a red line is displayed. If there are red lines all around a designated area, that means that it cannot be mined.", "");
      LocStr locStr40 = Loc.Str("TutorialOnMining__part10", "Below is an example of how a mining designation starting at surface level is reachable only if it touches the surface. The top designation is reachable as denoted by the yellow color. The bottom starts one level below the surface and is not reachable, denoted by the orange color with red borders.", "");
      LocStr locStr41 = Loc.Str("TutorialOnMining__part11Header", "Creating Ramps", "");
      LocStr1 locStr1_20 = Loc.Str1("TutorialOnMining__part11", "Use the {0} key to switch to the <b>ramp</b> mode. Then you can snap to a previous flat designations and extend a ramp from there.", "{0} = shortcut key");
      LocStr locStr42 = Loc.Str("TutorialOnMining__part12", "Each designation square can be mined by <b>only one excavator at a time</b>. Be sure that there are enough available designations if you have multiple excavators.", "");
      LocStr locStr43 = Loc.Str("TutorialOnMining__part13Header", "Resources layer", "");
      LocStr locStr44 = Loc.Str("TutorialOnMining__part13", "You can see available resources by toggling a resource overlay in the bottom-left corner of the screen.", "");
      string format1 = "\r\n{0}\r\n\r\n[ATTACH] {1}\r\n<IMAGE=Assets/Base/Tutorials/Mining/MiningTowerEditArea.jpg>\r\n\r\n[ATTACH] {2}\r\n<IMAGE=Assets/Base/Tutorials/Mining/MiningTowerVehicles.jpg>\r\n\r\n<h>{3}</h>\r\n[ATTACH] {4}\r\n<IMAGE=Assets/Base/Tutorials/Mining/Designate.jpg>\r\n\r\n[ATTACH] {5}\r\n<DIMAGE=Assets/Base/Tutorials/Mining/TerrainShape.jpg>\r\n\r\n[ATTACH] {6}\r\n<IMAGE=Assets/Base/Tutorials/Mining/FlatRampRotate.jpg>\r\n\r\n[ATTACH] {7}\r\n<IMAGE=Assets/Base/Tutorials/Mining/Elevation.jpg>\r\n\r\n[ATTACH] {8}\r\n<IMAGE=Assets/Base/Tutorials/Mining/Rotate.jpg>\r\n\r\n{9}\r\n\r\n[ATTACH] {10}\r\n<IMAGE=Assets/Base/Tutorials/Mining/DesignateStartingPoint.jpg>\r\n\r\n<h>{11}</h>\r\n[ATTACH] {12}\r\n<IMAGE=Assets/Base/Tutorials/Mining/CreatingRamps.jpg>\r\n\r\n{13}\r\n\r\n<h>{14}</h>\r\n[ATTACH] {15}\r\n<IMAGE=Assets/Base/Tutorials/Mining/Overlay.jpg>\r\n";
      string stringIn1 = Ids.Buildings.MineTower.TranslatedName(prototypesDb);
      string content16 = string.Format(format1, (object) locStr36.TranslatedString, (object) locStr2_13.Format(stringIn1.MakeBold(), TrCore.ManagedArea__EditAction.TranslatedString.MakeBold()), (object) locStr1_17.Format(stringIn1), (object) locStr37.TranslatedString, (object) locStr1_18.Format("[" + TutorialMessagesData.kb("ToggleMiningTool") + "]"), (object) locStr38.TranslatedString, (object) locStr2_14.Format(TutorialMessagesData.kb("Flip"), TutorialMessagesData.kb("Rotate")), (object) locStr2_15.Format(TutorialMessagesData.kb("RaiseUp"), TutorialMessagesData.kb("LowerDown")), (object) locStr1_19.Format(TutorialMessagesData.kb("Rotate")), (object) locStr39.TranslatedString, (object) locStr40.TranslatedString, (object) locStr41.TranslatedString, (object) locStr1_20.Format(TutorialMessagesData.kb("Flip")), (object) locStr42.TranslatedString, (object) locStr43.TranslatedString, (object) locStr44.TranslatedString);
      MessageProto messageProto14 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnMineTower, "Mining", content16, InGameMessageType.Tutorial, group: orThrow6));
      Mafi.Core.Prototypes.Proto orThrow19 = prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>((Mafi.Core.Prototypes.Proto.ID) Ids.Buildings.MineTower);
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto14, orThrow19));
      LocStr title = Loc.Str("RetainingWallsTitle", "Retaining walls", "Plural title of a structure that holds terrain in place to prevent it from a collapse");
      LocStr locStr45 = Loc.Str("TutorialOnWalls__part1", "When there is terrain dug from underneath a building or landslide that buries a building it may trigger building collapse. In that case the building gets lost and it can trigger further landslides and collapses. When mining a deeper mine, terrain can also collapse blocking vehicles from entering or exiting the mine.", "");
      LocStr locStr46 = Loc.Str("TutorialOnWalls__part2", "Each material has its own properties on how steep an angle it can hold until it collapses.", "");
      LocStr2 locStr2_16 = Loc.Str2("TutorialOnWalls__part3", "You can build {0} to prevent terrain from uncontrolled collapse. These are designed to hold terrain in place. They can hold up to {1} tiles of terrain.", "{0} = Retaining walls (RetainingWallsTitle), {1} = number (e.g. 5)");
      LocStr2 locStr2_17 = Loc.Str2("TutorialOnWalls__part4", "Retaining walls are best built before mining/dumping. They also cannot be built on top of any previously designated mining/dumping areas. Use {0} and {1} keys to raise or lower the wall.", "{0} = shortcut, {1} = shortcut");
      LocStr1 locStr1_21 = Loc.Str1("TutorialOnWalls__part5", "Any terrain higher or lower than {0} beside the retaining wall will cause it to collapse.", "{0} = number (e.g. 5)");
      LocStr1 locStr1_22 = Loc.Str1("TutorialOnWalls__part6", "{0} can be also used to create a contained place for dumping in otherwise unsuitable areas.", "{0} = Retaining walls (RetainingWallsTitle)");
      string format2 = "\r\n{0}\r\n\r\n{1}\r\n\r\n<h>{2}</h>\r\n[ATTACH] {3}\r\n<DIMAGE=Assets/Base/Tutorials/RetainingWalls/Intro.jpg>\r\n\r\n[ATTACH] {4}\r\n<IMAGE=Assets/Base/Tutorials/RetainingWalls/Build.jpg>\r\n\r\n[ATTACH] {5}\r\n<DIMAGE=Assets/Base/Tutorials/RetainingWalls/BuildLimit.jpg>\r\n\r\n[ATTACH] {6}\r\n<DIMAGE=Assets/Base/Tutorials/RetainingWalls/WallsDump.jpg>\r\n";
      string stringIn2 = "5";
      string content17 = string.Format(format2, (object) locStr45.TranslatedString, (object) locStr46.TranslatedString, (object) title.TranslatedString, (object) locStr2_16.Format(title.TranslatedString, stringIn2.MakeBold()), (object) locStr2_17.Format(TutorialMessagesData.kb("RaiseUp"), TutorialMessagesData.kb("LowerDown")), (object) locStr1_21.Format(stringIn2.MakeBold()), (object) locStr1_22.Format(title.TranslatedString));
      MessageProto messageProto15 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnRetainingWalls, title, content17, InGameMessageType.Tutorial, group: orThrow6));
      Mafi.Core.Prototypes.Proto orThrow20 = prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>((Mafi.Core.Prototypes.Proto.ID) Ids.Buildings.RetainingWallStraight1);
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto15, orThrow20));
      LocStr locStr47 = Loc.Str("TutorialOnShipRepair__part1", "You can use your ship to explore the world map. You can discover supplies to bring back to your island, other settlements to trade with, world mines to exploit, and more.", "");
      LocStr locStr48 = Loc.Str("TutorialOnShipRepair__part2Heading", "Exploration", "");
      LocStr2 locStr2_18 = Loc.Str2("TutorialOnShipRepair__part2", "To start exploring, open the world map ({0} key), select a destination (1), and click {1} (2). Once the ship arrives, it will start exploring. Exploration takes some time and you will be notified when it is complete.", "{0} -> key-binding that opens the map, {1} = 'Explore'");
      LocStr2 locStr2_19 = Loc.Str2("TutorialOnShipRepair__part3V2", "All the items that your ship brings will be automatically unloaded to the {0}. Just make sure that the {0} has enough free space. You can toggle on {1} to task your trucks to actively unload all cargo if there is storage available.", "{0} = Shipyard, {1} = Keep empty (ShipyardKeepEmpty)");
      LocStr locStr49 = Loc.Str("TutorialOnShipRepair__part4Heading", "Ship range and fuel", "");
      LocStr1 locStr1_23 = Loc.Str1("TutorialOnShipRepair__part4V2", "The ship needs fuel to travel and exploration of a new location requires an additional amount. In order to load the ship with fuel, select the {0} and <b>drag the green slider</b> of the fuel buffer to the right. Fuel can be delivered by trucks or via pipe.", "{0} = Shipyard");
      LocStr locStr50 = Loc.Str("TutorialOnShipRepair__part5Heading", "Enemies and pirates", "");
      LocStr locStr51 = Loc.Str("TutorialOnShipRepair__part5", "Some areas may be occupied by enemies or pirates. You cannot pass through these areas or explore them unless you defeat the pirates first. If your ship has no weapons equipped, it will automatically try to escape, otherwise, the battle will start.", "");
      LocStr locStr52 = Loc.Str("TutorialOnShipRepair__part6Heading", "Ship upgrades and weapons", "");
      LocStr1 locStr1_24 = Loc.Str1("TutorialOnShipRepair__part6", "Many components of the ship can be added or upgraded. Upgrades are performed in the {0}. The {0} prepares any required components regardless of whether the ship is present or not. Once upgrades are prepared, they get automatically applied when the ship arrives.", "{0} - Shipyard");
      string format3 = "\r\n[ATTACH] {0}\r\n<DIMAGE=Assets/Base/Tutorials/WorldExploration/Intro.jpg>\r\n\r\n<h>{1}</h>\r\n[ATTACH] {2}\r\n<IMAGE=Assets/Base/Tutorials/WorldExploration/WorldExplore.jpg>\r\n\r\n[ATTACH] {3}\r\n<IMAGE=Assets/Base/Tutorials/WorldExploration/ShipyardStorage.jpg>\r\n\r\n<h>{4}</h>\r\n[ATTACH] {5}\r\n<IMAGE=Assets/Base/Tutorials/WorldExploration/ShipyardFuel.jpg>\r\n\r\n<h>{6}</h>\r\n[ATTACH] {7}\r\n<IMAGE=Assets/Base/Tutorials/WorldExploration/ShipCombat.jpg>\r\n\r\n<h>{8}</h>\r\n[ATTACH] {9}\r\n<IMAGE=Assets/Base/Tutorials/WorldExploration/ShipUpgrade.jpg>\r\n";
      string str2 = Ids.Buildings.Shipyard2.TranslatedName(prototypesDb);
      string content18 = string.Format(format3, (object) locStr47.TranslatedString, (object) locStr48.TranslatedString, (object) locStr2_18.Format(TutorialMessagesData.kb("ToggleMap"), TrCore.WorldLocation_Orders__Explore.TranslatedString.MakeBold()), (object) locStr2_19.Format(str2, "\"" + TrCore.ShipyardKeepEmpty.TranslatedString + "\""), (object) locStr49.TranslatedString, (object) locStr1_23.Format(str2), (object) locStr50.TranslatedString, (object) locStr51.TranslatedString, (object) locStr52.TranslatedString, (object) locStr1_24.Format(str2));
      MessageProto messageProto16 = prototypesDb.Add<MessageProto>(new MessageProto(Ids.Messages.TutorialOnShipRepair, "World exploration", content18, InGameMessageType.Tutorial, group: orThrow8));
      prototypesDb.Add<MessageTriggerOnShipRepairProto>(new MessageTriggerOnShipRepairProto(messageProto16));
      LocStr locStr53 = Loc.Str("TutorialOnTrucks__part1", "Trucks are the most versatile option to transport products around the island. They can transport almost every product except molten materials or hot gasses such as steam.", "");
      LocStr locStr54 = Loc.Str("TutorialOnTrucks__part2", "Anytime there is a machine that needs a product, trucks will try to find a source and deliver it. The same goes for construction.", "");
      LocStr locStr55 = Loc.Str("TutorialOnTrucks__part3", "Trucks can get very busy if there are lots of jobs to do. You can see the current load in the overview panel on the top left of the screen. If the load is high, consider building more trucks or automating products delivery building pipes and conveyors.", "");
      LocStr locStr56 = Loc.Str("TutorialOnTrucks__part4", "When trucks become too busy, deliveries that are critical to your factory operation may not be completed on time. To help with this, you can set higher priority on places where products are needed the most. The lower the number, the higher the priority.", "");
      LocStr1 locStr1_25 = Loc.Str1("TutorialOnTrucks__part5", "Trucks usually wait until there is enough cargo to transport to make their trip worth it. If you want trucks to always prefer driving fully loaded to further optimize their journey, you can disable {0}.", "{0} = Allow partially loaded trucks (PartialTrucksToggle)");
      LocStr locStr57 = Loc.Str("TutorialOnTrucks__part6", "Don’t forget that trucks require fuel and maintenance, failing to provide these may grind your logistics to a halt and cause problems.", "");
      string content19 = string.Format("\r\n{0}\r\n\r\n{1}\r\n<DIMAGE=Assets/Base/Tutorials/Trucks/Intro.jpg>\r\n\r\n[ATTACH] {2}\r\n<IMAGE=Assets/Base/Tutorials/Trucks/TrucksBusy.jpg>\r\n\r\n[ATTACH] {3}\r\n<IMAGE=Assets/Base/Tutorials/Trucks/Priority.jpg>\r\n\r\n[ATTACH] {4}\r\n<IMAGE=Assets/Base/Tutorials/Trucks/PartiallyLoadedToggle.jpg>\r\n\r\n[ATTACH] {5}\r\n<DIMAGE=Assets/Base/Tutorials/Trucks/Maintenance.jpg>\r\n", (object) locStr53, (object) locStr54, (object) locStr55, (object) locStr56, (object) locStr1_25.Format(TrCore.PartialTrucksToggle.TranslatedString.Quote()), (object) locStr57);
      prototypesDb.Add<MessageProto>(new MessageProto(Ids.Messages.TutorialOnTrucks, "Trucks", content19, InGameMessageType.Tutorial, unlockSilentlyFromStart: true, group: orThrow7));
      LocStr2 locStr2_20 = Loc.Str2("TutorialOnTransports2__height", "Trucks can go under any conveyors or pipes that are at height {0} or higher. However, taller vehicles such as excavators cannot go under them. In order to let taller vehicles pass, you must build a {1}.", "{0} = 2, {1} = Ramp");
      LocStr locStr58 = Loc.Str("TutorialOnPathing__part1", "If your vehicle has issues reaching its target because there is no valid path, you can investigate this situation by toggling its <b>navigation overlay</b>. Each type of vehicle has its own overlay. Trucks delivering construction materials have some distance tolerance but vehicles performing regular duties need to be able to navigate near their target.", "");
      LocStr locStr59 = Loc.Str("TutorialOnPathing__part3", "Sometimes, vehicles can get stuck. You can always recover a vehicle using the <b>recovery action</b>. To avoid situations like this, use wide ramps and retaining walls during mining to prevent terrain collapse.", "");
      LocStr locStr60 = Loc.Str("TutorialOnPathing__part4", "Sometimes, trucks can not access certain buildings due to obstacles such as terrain or other buildings. Instead of rebuilding parts of your factory to accommodate the vehicles, you can turn off import or export at the problematic building to prevent vehicles from trying to access it.", "");
      string content20 = string.Format("\r\n[ATTACH] {0}\r\n<IMAGE=Assets/Base/Tutorials/VehiclesAccessibility/NavOverlay.jpg>\r\n\r\n[ATTACH] {1}\r\n<DIMAGE=Assets/Base/Tutorials/VehiclesAccessibility/Ramp.jpg>\r\n\r\n[ATTACH] {2}\r\n<IMAGE=Assets/Base/Tutorials/VehiclesAccessibility/Recover.jpg>\r\n\r\n[ATTACH] {3}\r\n<IMAGE=Assets/Base/Tutorials/VehiclesAccessibility/ImprotExportToggle.jpg>\r\n", (object) locStr58, (object) locStr2_20.Format("2", Ids.Buildings.VehicleRamp.TranslatedName(prototypesDb).MakeBold()), (object) locStr59, (object) locStr60);
      MessageProto messageProto17 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnVehiclesAccessibility, "Vehicles accessibility", content20, InGameMessageType.Tutorial, group: orThrow7));
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto17, prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>((Mafi.Core.Prototypes.Proto.ID) Ids.Buildings.VehiclesDepot)));
      LocStr locStr61 = Loc.Str("TutorialOnTransports2__part1", "Transports (pipes and conveyor belts) are an alternative way of transporting products around your factory. They reduce demands on your truck logistics and make product deliveries more steady.", "");
      LocStr1 locStr1_26 = Loc.Str1("TutorialOnTransports2__part2", "You can see which products are making trucks the most busy in the {0} tab.", "{0} = analytics (TrucksAnalytics__Title)");
      LocStr1 locStr1_27 = Loc.Str1("TutorialOnTransports2__part3", "Split and merge transports by simply connecting them to each other. If you need control over priorities and ratios, research {0} to get balancers with advanced capabilities.", "{0} = technology title");
      LocStr locStr62 = Loc.Str("TutorialOnTransports2__part4", "You can also start building a transport by hovering over the red/green arrow next to a building/transport port while the construction menu is open.", "");
      LocStr2 locStr2_21 = Loc.Str2("TutorialOnTransports2__part5", "Most of the transports (except {0}) <b>can go up/down</b> by pressing {1} keys during the design process. This is handy when trying to make space for vehicles to go under.", "{0} = molten channel, {1} = key-bindings, e.g. E/Q");
      LocStr1 locStr1_28 = Loc.Str1("TutorialOnTransports2__part7", "You can build transports <b>stacked on top of each other</b>. To make it easier, toggle {0} key while placing a transport to <b>prevent it from snapping</b> to any existing one.", "{0} = key-binding");
      string content21 = string.Format("\r\n[ATTACH] {0}\r\n<DIMAGE=Assets/Base/Tutorials/Transports/Intro.jpg>\r\n\r\n[ATTACH] {1}\r\n<IMAGE=Assets/Base/Tutorials/Transports/Analytics.jpg>\r\n\r\n[ATTACH] {2}\r\n<DIMAGE=Assets/Base/Tutorials/Transports/Connectors.jpg>\r\n\r\n[ATTACH] {3}\r\n<IMAGE=Assets/Base/Tutorials/Transports/BuildFromPort.jpg>\r\n\r\n[ATTACH] {4}\r\n<DIMAGE=Assets/Base/Tutorials/Transports/Height.jpg>\r\n\r\n[ATTACH] {5}\r\n<DIMAGE=Assets/Base/Tutorials/VehiclesAccessibility/Ramp.jpg>\r\n\r\n[ATTACH] {6}\r\n<IMAGE=Assets/Base/Tutorials/Transports/Snapping.jpg>\r\n", (object) locStr61.TranslatedString, (object) locStr1_26.Format(TrCore.TrucksAnalytics__Title.TranslatedString.MakeBold()), (object) locStr1_27.Format(Ids.Research.TransportsBalancing.TranslatedName(prototypesDb).MakeBold()), (object) locStr62, (object) locStr2_21.Format(Ids.Transports.MoltenMetalChannel.TranslatedName(prototypesDb), (TutorialMessagesData.kb("RaiseUp") + " / " + TutorialMessagesData.kb("LowerDown")).MakeBold()), (object) locStr2_20.Format("2", Ids.Buildings.VehicleRamp.TranslatedName(prototypesDb).MakeBold()), (object) locStr1_28.Format(TutorialMessagesData.kb("TransportSnapping")));
      MessageProto messageProto18 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnTransports, "Pipes & conveyor belts", content21, InGameMessageType.Tutorial, group: orThrow7));
      prototypesDb.Add<MessageTriggerOnEntityConstructedProto>(new MessageTriggerOnEntityConstructedProto(messageProto18, Ids.Transports.PipeT1));
      LocStr locStr63 = Loc.Str("TutorialOnStorage__part1", "It is beneficial to use conveyor belts and pipes to transport goods from production buildings to storages and let trucks to balance the inventory between storages. This helps keep truck utilization high since they can always travel fully loaded. It also gives machines an extra input and output buffer for uninterrupted operation.", "");
      LocStr3 locStr3_3 = Loc.Str3("TutorialOnStorage__part2", "For example, {0} can benefit by having {1} and {2} storage silos attached via conveyor belts.", "{0} = blast furnace, {1} = iron ore, {2} = coal");
      LocStr1 locStr1_29 = Loc.Str1("TutorialOnStorage__part3", "A storage unit will not actively request products from trucks by default. To change this, drag the green slider marked as <b>{0}</b> to the right. This makes the storage request products until it gets filled up to the green slider.", "{0} = Keep full (StoredProduct__KeepFull)");
      LocStr2 locStr2_22 = Loc.Str2("TutorialOnStorage__part4", "For storages that you do not want full (such as {0}, pictured below), you can use the <b>{1}</b> slider to set the threshold which vehicles will automatically retrieve materials and store them at another available storage.", "{0} = Slag, {1} = Empty (StoredProduct__KeepEmpty)");
      LocStr1 locStr1_30 = Loc.Str1("TutorialOnStorage__part5", "Note that the red/green sliders have no effect on connected transports. For example, a storage set to <b>{0}</b> will still continue to output products via connected transports, ignoring any rules set to the storage.", "{0} = Keep full (StoredProduct__KeepFull)");
      LocStr locStr64 = Loc.Str("TutorialOnStorage__part6", "You can also <b>set up alerts</b> to be notified if the storage becomes either too full or too empty which would prevent connected machines from performing correctly. This is ideal for alerting you if a critical material providing storage, such as coal to a power plant, is running low.", "");
      LocStr2 locStr2_23 = Loc.Str2("TutorialOnStorage__part7", "Once machines are connected via transports and a first product is delivered / received, trucks will no longer try to deliver / receive that type of product. You can manually override this behavior via the logistics panel in each machine in {0} and {1} panels.", "{0} = Truck Import (LogisticsControl__InputTitle), {1} = Truck Export (LogisticsControl__OutputTitle)");
      string content22 = string.Format("\r\n{0}\r\n\r\n[ATTACH] {1}\r\n<IMAGE=Assets/Base/Tutorials/StoragesWithTransports/Intro.jpg>\r\n\r\n[STEP] {2}\r\n<IMAGE=Assets/Base/Tutorials/StoragesWithTransports/FullSlider.jpg>\r\n\r\n[STEP] {3}\r\n<IMAGE=Assets/Base/Tutorials/StoragesWithTransports/EmptySlider.jpg>\r\n\r\n{4}\r\n\r\n[STEP] {5}\r\n<IMAGE=Assets/Base/Tutorials/StoragesWithTransports/Alerts.jpg>\r\n\r\n[ATTACH] {6}\r\n<IMAGE=Assets/Base/Tutorials/StoragesWithTransports/ImportExportToggle.jpg>\r\n", (object) locStr63.TranslatedString, (object) locStr3_3.Format(Ids.Machines.SmeltingFurnaceT1.TranslatedName(prototypesDb).MakeBold(), Ids.Products.IronOre.TranslatedName(prototypesDb).MakeBold(), Ids.Products.Coal.TranslatedName(prototypesDb).MakeBold()), (object) locStr1_29.Format(TrCore.StoredProduct__KeepFull.TranslatedString.MakeBold()), (object) locStr2_22.Format(Ids.Products.Slag.TranslatedName(prototypesDb).MakeBold(), TrCore.StoredProduct__KeepEmpty.TranslatedString.MakeBold()), (object) locStr1_30.Format(TrCore.StoredProduct__KeepFull.TranslatedString.MakeBold()), (object) locStr64.TranslatedString, (object) locStr2_23.Format(TrCore.LogisticsControl__InputTitle.TranslatedString.MakeBold(), TrCore.LogisticsControl__OutputTitle.TranslatedString.MakeBold()));
      MessageProto messageProto19 = prototypesDb.Add<MessageProto>(new MessageProto(Ids.Messages.TutorialOnStoragesAndTransports, "Storages with transports", content22, InGameMessageType.Tutorial, group: orThrow7));
      Mafi.Core.Prototypes.Proto orThrow21 = prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>((Mafi.Core.Prototypes.Proto.ID) Ids.Transports.FlatConveyor);
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto19, orThrow21));
      LocStr3 locStr3_4 = Loc.Str3("TutorialOnIronOre__part1", "The {0} can process both {1} and {2} by toggling both recipes on. To do so, turn on the <b>{1}</b> recipe by clicking on it.", "{0} = blast furnace, {1} = iron ore, {2} = iron scrap");
      LocStr2 locStr2_24 = Loc.Str2("TutorialOnIronOre__part2", "The priority of recipe execution depends on their order which can be changed using the arrows on the left (1). If you want to prioritize {0} processing over {1}, click the <b>up arrow</b> on the <b>{0} recipe</b> for it to move above the <b>{1} recipe</b>.", "{0} = iron ore, {1} = iron scrap");
      LocStr3 locStr3_5 = Loc.Str3("TutorialOnIronOre__part3", "With {0} being smelted, the {2} will produce <b>{1}</b>. {1} can be dumped anywhere on the island by placing dumping designations (unless you prevent {1} dumping by changing the <b>global dumping filter</b>). Trucks will always prioritize delivering {1} and other materials to where it is needed before dumping it (e.g. concrete production). Dumping {1} is important as typically your smelting industry will produce way more {1} than you can use. Dumping it has no pollution effect.", "{0} = iron ore, {1} = slag, {2} = Blast furnace");
      string content23 = string.Format("\r\n[ATTACH] {0}\r\n<IMAGE=Assets/Base/Tutorials/IronOreSmelting/SelectRecipe.jpg>\r\n\r\n[ATTACH] {1}\r\n<IMAGE=Assets/Base/Tutorials/IronOreSmelting/ChangePriority.jpg>\r\n\r\n[ATTACH] {2}\r\n<IMAGE=Assets/Base/Tutorials/IronOreSmelting/DumpSlag.jpg>\r\n", (object) locStr3_4.Format(Ids.Machines.SmeltingFurnaceT1.TranslatedName(prototypesDb).MakeBold(), Ids.Products.IronOre.TranslatedName(prototypesDb), Ids.Products.IronScrap.TranslatedName(prototypesDb)), (object) locStr2_24.Format(Ids.Products.IronOre.TranslatedName(prototypesDb), Ids.Products.IronScrap.TranslatedName(prototypesDb)), (object) locStr3_5.Format(Ids.Products.IronOre.TranslatedName(prototypesDb).MakeBold(), Ids.Products.Slag.TranslatedName(prototypesDb), Ids.Machines.SmeltingFurnaceT1.TranslatedName(prototypesDb).MakeBold()));
      MessageProto messageProto20 = prototypesDb.Add<MessageProto>(new MessageProto(Ids.Messages.TutorialOnIronOreSmelting, "Iron ore smelting", content23, InGameMessageType.Tutorial, group: orThrow2));
      prototypesDb.Add<MessageTriggerOnQuantityProducedProto>(new MessageTriggerOnQuantityProducedProto(messageProto20, Ids.Products.IronOre.GetProto(prototypesDb), 8.Quantity()));
      LocStr locStr65 = Loc.Str("CargoDepotName", "Cargo depot", "general name for cargo depot, should match to names in CargoDepotT1 and CargoDepotT2");
      LocStr1 locStr1_31 = Loc.Str1("TutorialOnCargoShip__part1", "A Cargo ship allows to automate product deliveries from world mines and oil rigs. The ship has to be discovered, repaired, or purchased on the world map, it cannot be built directly on your island. Once you obtain a cargo ship you can build a {0} on your island and the ship will dock there automatically.", "{0} = Cargo depot");
      LocStr locStr66 = Loc.Str("TutorialOnCargoShip__part2", "The number of ships available (repaired) and the number of ships discovered is shown at the top of the interface.", "");
      LocStr1 locStr1_32 = Loc.Str1("TutorialOnCargoShip__part3a", "A {0} can only be researched once a first cargo ship is discovered on the world map. Depots can be built on the shore of your island. When placing a {0}, you will see striped patterns reaching out into the sea indicating ship access. You must ensure that at least one area is green, indicating that a ship will be able to dock. Be careful to not block these areas with other buildings such as other depots or ocean pumps.", "{0} = Cargo depot");
      LocStr1 locStr1_33 = Loc.Str1("TutorialOnCargoShip__part3b", "A {0} requires <b>modules</b> in order to store and transfer products. There are modules for each type of product and you can mix and match them on a single depot. These modules determine what types of products your ship will import or export, you need to assign this product manually. Modules also have input and output ports for you to connect transports to.", "{0} = Cargo depot");
      LocStr locStr67 = Loc.Str("TutorialOnCargoShip__part4Heading", "Ship logistics", "");
      LocStr locStr68 = Loc.Str("TutorialOnCargoShip__part4V2", "A cargo ship will depart automatically when there is enough cargo to fill the ship on the world map (1). A ship can pick up cargo from any entity on the world map. Each trip of the ship has a fixed fuel cost which is based on the size of the ship (2). ", "");
      LocStr locStr69 = Loc.Str("TutorialOnCargoShip__part5V2", "Upgrading the cargo depot will also upgrade the attached ship. This expands the number of slots and thus the amount of transported materials. Larger ships are more efficient in fuel consumption.", "");
      string format4 = "\r\n{0}\r\n<DIMAGE=Assets/Base/Tutorials/CargoShip/Intro.jpg>\r\n\r\n{1}\r\n<IMAGE=Assets/Base/Tutorials/CargoShip/Count.jpg>\r\n\r\n<h>{2}</h>\r\n{3}\r\n<IMAGE=Assets/Base/Tutorials/CargoShip/BuildDepot.jpg>\r\n\r\n{4}\r\n<IMAGE=Assets/Base/Tutorials/CargoShip/Modules.jpg>\r\n\r\n<h>{5}</h>\r\n{6}\r\n<IMAGE=Assets/Base/Tutorials/CargoShip/Logistics.jpg>\r\n\r\n{7}\r\n<IMAGE=Assets/Base/Tutorials/CargoShip/Upgrade.jpg>\r\n";
      string translatedString1 = locStr65.TranslatedString;
      string content24 = string.Format(format4, (object) locStr1_31.Format(translatedString1.MakeBold()), (object) locStr66.TranslatedString, (object) translatedString1, (object) locStr1_32.Format(translatedString1), (object) locStr1_33.Format(translatedString1), (object) locStr67.TranslatedString, (object) locStr68.TranslatedString, (object) locStr69.TranslatedString);
      MessageProto messageProto21 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnCargoShip, "Cargo ship", content24, InGameMessageType.Tutorial, group: orThrow7));
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto21, prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>(Ids.Technology.CargoShip)));
      LocStr locStr70 = Loc.Str("TutorialOnRoutes__part1V2", "Trucks deliver cargo automatically based on the <b>priority</b> settings of source and destination building. Sometimes you may want to have a greater control over delivery source/destination or servicing vehicles. Custom routes offer this control and can increase efficiency and reliability of logistics.", "");
      LocStr3 locStr3_6 = Loc.Str3("TutorialOnRoutes__part2V2", "A {0} can be assigned to export mined products to specific storages. To do this, select a {0} (1) and then click the {1} button under {2} (2) then click on desired storages. ", "{0} = Mine control tower, {1} = +/-, name of the button, {2} - export routes (ExportRoutesTitle)");
      LocStr2 locStr2_25 = Loc.Str2("TutorialOnRoutes__part3V2", "Assigned storages can be seen in the {0} and right-clicking on their icon will <b>delete the route</b>. The routes can be also removed by clicking on the {1} button again and clicking on previously assigned storages.", "{0} - export routes (ExportRoutesTitle), {1} = +/-, name of the button");
      LocStr1 locStr1_34 = Loc.Str1("TutorialOnRoutes__part4V2", "When a {0} has export routes set up to storages with certain products, trucks will deliver these products only to the assigned storages and nowhere else.", "{0} = Mine control tower");
      LocStr1 locStr1_35 = Loc.Str1("TutorialOnRoutes2__part5V2", "Custom routes can be also <b>set up between storages</b> to further optimize your operations as shown below. Just make sure that the destination storage has the {0} slider set (1). You can optionally assign trucks to the receiving storage to solely service this supply line (2). There are also two toggles (3) that let you restrict the storage to only accept connected storages and assigned trucks.", "{0} = Keep full (StoredProduct__KeepFull)");
      LocStr1 locStr1_36 = Loc.Str1("TutorialOnRoutes2__part6V2", "Following example shows how a conveyor belt together with custom routes can reduce truck trips while dumping excess mined material. First, assign the {0} to a nearby storage (1). The storage is connected via a long conveyor belt (2) to another storage. The second storage is set to export to the nearby tower (3) which has an area marked for dumping.", "{0} = Mine control tower");
      LocStr2 locStr2_26 = Loc.Str2("TutorialOnRoutes__part7V2", "Custom routes can be also used to assign a {0} to a {1} to specify fueling preferences for trucks and excavators.", "{0} = Fuel station, {1} = Mine control tower");
      LocStr locStr71 = Loc.Str("TutorialOnRoutes__part8", "It is recommended to use custom routes wisely and put them in places where it helps the most. Micromanaging every single storage with custom routes can lead to unnecessary complexity in your logistics system and can cause troubles during your future factory expansion.", "");
      string format5 = "\r\n{0}\r\n<DIMAGE=Assets/Base/Tutorials/CustomRoutes/Intro.jpg>\r\n\r\n[ATTACH] {1}\r\n<IMAGE=Assets/Base/Tutorials/CustomRoutes/Export1.jpg>\r\n\r\n[ATTACH] {2}\r\n<IMAGE=Assets/Base/Tutorials/CustomRoutes/Export2.jpg>\r\n\r\n[ATTACH] {3}\r\n<IMAGE=Assets/Base/Tutorials/CustomRoutes/TowerToStorages.jpg>\r\n\r\n[ATTACH] {4}\r\n<IMAGE=Assets/Base/Tutorials/CustomRoutes/Summary.jpg>\r\n\r\n[ATTACH] {5}\r\n<IMAGE=Assets/Base/Tutorials/CustomRoutes/TowerToTower.jpg>\r\n\r\n[ATTACH] {6}\r\n<IMAGE=Assets/Base/Tutorials/CustomRoutes/FuelToTower.jpg>\r\n\r\n{7}\r\n";
      string str3 = Ids.Buildings.MineTower.TranslatedName(prototypesDb);
      string content25 = string.Format(format5, (object) locStr70.TranslatedString, (object) locStr3_6.Format(str3, "+/-".MakeBold(), TrCore.ExportRoutesTitle.TranslatedString.MakeBold()), (object) locStr2_25.Format(TrCore.ExportRoutesTitle.TranslatedString.MakeBold(), "+/-".MakeBold()), (object) locStr1_34.Format(str3), (object) locStr1_35.Format(TrCore.StoredProduct__KeepFull.TranslatedString.MakeBold()), (object) locStr1_36.Format(str3), (object) locStr2_26.Format(Ids.Buildings.FuelStationT1.TranslatedName(prototypesDb).MakeBold(), str3), (object) locStr71.TranslatedString);
      MessageProto messageProto22 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnAdvancedLogistics, "Custom routes", content25, InGameMessageType.Tutorial, group: orThrow7));
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto22, prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>(IdsCore.Technology.CustomRoutes)));
      LocStr locStr72 = Loc.Str("TutorialOnPlanning__part1", "The Planning Mode is toggleable mode that makes any building placed to be initially paused. You can toggle Planning Mode on and off by clicking the Planning Mode button in the bottom left corner toolbar. Buildings with paused construction are colored <b>Gray</b> as shown below.", "");
      LocStr2 locStr2_27 = Loc.Str2("TutorialOnPlanning__part3V2", "Turning off Planning Mode does not unpause buildings that were placed while it was on. To unpause buildings placed, use the {0} (1). You can also select a building that was placed in {1} and unpause it by clicking the pause button on the Construction Inspector window (2).", "{0} - Planning tool, {1} - Planning mode");
      LocStr locStr73 = Loc.Str("TutorialOnPlanning__part5Heading", "Color Statuses of Construction", "");
      LocStr locStr74 = Loc.Str("TutorialOnPlanning__part6", "When placing buildings, the color of the building ghost itself will change depending on its <b>construction status</b>.", "");
      LocStr locStr75 = Loc.Str("TutorialOnPlanning__part7", "Buildings colored <b>White</b> are planned for construction and are currently paused. <b>Blue</b> colored buildings are currently being constructed. <b>Red</b> colored buildings are currently being deconstructed.", "");
      string content26 = string.Format("\r\n{0}\r\n<DIMAGE=Assets/Base/Tutorials/PlanningMode/Button.jpg>\r\n\r\n{1}\r\n<IMAGE=Assets/Base/Tutorials/PlanningMode/Unpause.jpg>\r\n\r\n<h>{2}</h>\r\n{3}\r\n\r\n{4}\r\n\r\n<DIMAGE=Assets/Base/Tutorials/PlanningMode/Colors.jpg>\r\n", (object) locStr72, (object) locStr2_27.Format(TrCore.PauseTool.TranslatedString.MakeBold(), TrCore.PlanningMode.TranslatedString.MakeBold()), (object) locStr73, (object) locStr74, (object) locStr75);
      MessageProto messageProto23 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.PlanningModeTutorial, TrCore.PlanningMode, content26, InGameMessageType.Tutorial, group: orThrow1));
      Mafi.Core.Prototypes.Proto orThrow22 = prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>(IdsCore.Technology.PlanningTool);
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto23, orThrow22));
      LocStr locStr76 = Loc.Str("TutorialOnCoalPower__part1", "A more efficient way of generating power compared to diesel generators is a coal power plant. Coal burned in boilers turns water into steam (1). This steam then spins turbines (2) and transfers mechanical force over a shaft into attached power generators (3) which make electricity from it.", "");
      LocStr locStr77 = Loc.Str("TutorialOnCoalPower__part2", "It does not matter how you order your turbines and generators, as long as they are all on one shaft they work together.", "");
      LocStr1 locStr1_37 = Loc.Str1("TutorialOnCoalPower__part3", "Generators do not produce electricity when there is no need and ignore the energy from the mechanical shaft. However, the turbines do not stop when the shaft is spinning at full power, instead, they let the steam pass through which means some energy gets lost. To combat this, you can use a {0} attached to the mechanical shaft which will store the mechanical energy as inertia and return it when the power is needed, behaving like batteries.", "{0} = Flywheel");
      LocStr1 locStr1_38 = Loc.Str1("TutorialOnCoalPower__part4", "A {0} can be used in combination with “auto-balance” toggle on turbines. Once enabled, turbines will automatically turn off when the connected shaft has maximum inertia, and back on when the inertia is low. The {0} helps to increase the total inertia of the shaft to make this system more efficient and prevent loss of power due to turbines' slow startup.", "{0} = Flywheel");
      string content27 = string.Format("\r\n[ATTACH] {0}\r\n<IMAGE=Assets/Base/Tutorials/SteamPowerPlant/Intro.jpg>\r\n\r\n[ATTACH] {1}\r\n<DIMAGE=Assets/Base/Tutorials/SteamPowerPlant/AnyOrder.jpg>\r\n\r\n[ATTACH] {2}\r\n<IMAGE=Assets/Base/Tutorials/SteamPowerPlant/Flywheels.jpg>\r\n\r\n[ATTACH] {3}\r\n<DIMAGE=Assets/Base/Tutorials/SteamPowerPlant/BalanceToggle.jpg>\r\n", (object) locStr76.TranslatedString, (object) locStr77.TranslatedString, (object) locStr1_37.Format(Ids.Machines.Flywheel.TranslatedName(prototypesDb).MakeBold()), (object) locStr1_38.Format(Ids.Machines.Flywheel.TranslatedName(prototypesDb).MakeBold()));
      MessageProto messageProto24 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnCoalPower, "Coal power plant", content27, InGameMessageType.Tutorial, group: orThrow3));
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto24, prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>((Mafi.Core.Prototypes.Proto.ID) Ids.Machines.PowerGeneratorT1)));
      LocStr1 locStr1_39 = Loc.Str1("TutorialOnMaintenance__part1", "Maintenance is a crucial global resource that is required by vehicles and buildings to keep operational otherwise they break down and stop working. Maintenance level of each entity can be seen on the bottom of its window (1). In an emergency, broken entities can be instantly repaired using {0} (2).", "{0} = Unity");
      LocStr1 locStr1_40 = Loc.Str1("TutorialOnMaintenance__part2", "In order to produce maintenance you need to build a {0} and supply it with the necessary materials.", "{0} = Maintenance depot");
      LocStr locStr78 = Loc.Str("TutorialOnMaintenance__part3", "You can see the current Maintenance amount on the right side of the screen (1). You can also see Maintenance Production and Consumption over time in the Statistics screen (2).", "");
      string content28 = string.Format("\r\n[ATTACH] {0}\r\n<IMAGE=Assets/Base/Tutorials/Maintenance/MaintenanceRepair.jpg>\r\n\r\n[ATTACH] {1}\r\n<DIMAGE=Assets/Base/Tutorials/Maintenance/Intro.jpg>\r\n\r\n[ATTACH] {2}\r\n<IMAGE=Assets/Base/Tutorials/Maintenance/Stats.jpg>\r\n", (object) locStr1_39.Format(TrCore.Unity), (object) locStr1_40.Format(Ids.Buildings.MaintenanceDepotT0.TranslatedName(prototypesDb).MakeBold()), (object) locStr78.TranslatedString);
      MessageProto messageProto25 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnMaintenance, "Maintenance", content28, InGameMessageType.Tutorial, group: orThrow3));
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto25, prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>((Mafi.Core.Prototypes.Proto.ID) Ids.Buildings.MaintenanceDepotT0)));
      LocStr locStr79 = Loc.Str("TutorialOnPopsAndUnity__part1", "Population is one of the most important pillars of your economy. You need to <b>provide your people</b> with housing, food, and other services and in return they will work for you.", "");
      LocStr locStr80 = Loc.Str("TutorialOnPopsAndUnity__part2", "People live in <b>settlements</b>. One settlement can be composed of one or more attached housing units and service buildings. You can have more than one settlement, but each requires its own services.", "");
      LocStr locStr81 = Loc.Str("TutorialOnPopsAndUnity__part3", "If there are more people than housing capacity, some will become <b>homeless</b>. Homeless people are very unhappy and they won’t work for you.", "");
      LocStr1 locStr1_41 = Loc.Str1("TutorialOnPopsAndUnity__part4", "Population will naturally increase over time if people are healthy and housing is available. You can control the growth rate using edicts in the {0}.", "{0} = Captain’s office");
      LocStr1 locStr1_42 = Loc.Str1("TutorialOnPopsAndUnity__part5", "{0} is a virtual resource that is generated when people are well and happy. The more services and comfort you provide, the more united they will feel, and generate more unity in return.", "{0} = Unity");
      LocStr1 locStr1_43 = Loc.Str1("TutorialOnPopsAndUnity__part6", "{0} can be spent on special tasks such as research, trade, work at remote mines, or vehicle recovery. Actions that require unity are usually denoted by purple color.", "{0} = Unity");
      LocStr1 locStr1_44 = Loc.Str1("TutorialOnPopsAndUnity__part7", "{0} can be extremely helpful in emergency situations. For example, {0} actions allow to instantly deliver products for construction or boost production of selected machines. It is advised to always keep some unspent {0} for when it is needed the most.", "{0} = Unity");
      LocStr1 locStr1_45 = Loc.Str1("TutorialOnPopsAndUnity__part8", "An overview of {0} gain/loss can be seen in the population overview window. The maximum amount of {0} that can be accumulated is determined by the amount and quality of housing. Recurrent unity gain/loss is computed on a monthly basis.", "{0} = Unity");
      string content29 = string.Format("\r\n{0}\r\n\r\n{1}\r\n\r\n{2}\r\n\r\n<DIMAGE=Assets/Base/Tutorials/PopsAndUnity/Settlement.jpg>\r\n\r\n[ATTACH] {3}\r\n<IMAGE=Assets/Base/Tutorials/PopsAndUnity/Edicts.jpg>\r\n\r\n<h>{4}</h>\r\n{5}\r\n\r\n[ATTACH] {6}\r\n<IMAGE=Assets/Base/Tutorials/PopsAndUnity/Boost.jpg>\r\n\r\n{7}\r\n\r\n[ATTACH] {8}\r\n<IMAGE=Assets/Base/Tutorials/PopsAndUnity/UnityOverview.jpg>\r\n", (object) locStr79.TranslatedString, (object) locStr80.TranslatedString, (object) locStr81.TranslatedString, (object) locStr1_41.Format(Ids.Buildings.CaptainOfficeT1.TranslatedName(prototypesDb).MakeBold()), (object) TrCore.Unity, (object) locStr1_42.Format(TrCore.Unity), (object) locStr1_43.Format(TrCore.Unity), (object) locStr1_44.Format(TrCore.Unity), (object) locStr1_45.Format(TrCore.Unity));
      MessageProto messageProto26 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnPopsAndUnity, "Population and Unity", content29, InGameMessageType.Tutorial, group: orThrow5));
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto26, prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>((Mafi.Core.Prototypes.Proto.ID) Ids.Buildings.Beacon)));
      LocStr2 locStr2_28 = Loc.Str2("TutorialOnWorldEntities__part1", "When you first discover a world mine, you must repair it before exploiting it. This is done by selecting the structure icon on the map and clicking {0} (1). The {1} will now have the option of loading the supplies necessary to repair that structure (2). Once loaded, they must be delivered by your main ship to begin the repairs.", "{0} = Start repairs (StartRepairs), {1} = Shipyard");
      LocStr3 locStr3_7 = Loc.Str3("TutorialOnWorldEntities__part2", "World Structures have a configuration window when selected on the {0} (1). You can select the {1} (2) that determines the rate of production but it also affects how many workers are required to work there and the {2} cost associated with it (3). You can increase the maximum {1} by upgrading the structure (4). In emergencies, you can load cargo to your ship when it’s present (5).", "{0} = World map (WorldMap), {1} = production level (WorldMineProductionLvl__Title), {2} = Unity");
      LocStr1 locStr1_46 = Loc.Str1("TutorialOnWorldEntities__part3", "For more information on using cargo ships and depots to automate collection of these supplies, visit {0} tutorial.", "{0} = Cargo Ship (name of the tutorial)");
      string content30 = string.Format("\r\n[ATTACH] {0}\r\n<IMAGE=Assets/Base/Tutorials/WorldStructures/RepairOilRig.jpg>\r\n\r\n[ATTACH] {1}\r\n<IMAGE=Assets/Base/Tutorials/WorldStructures/Inspector.jpg>\r\n\r\n{2}\r\n", (object) locStr2_28.Format(TrCore.StartRepairs.TranslatedString.MakeBold(), Ids.Buildings.Shipyard2.TranslatedName(prototypesDb).MakeBold()), (object) locStr3_7.Format(TrCore.WorldMap.TranslatedString, TrCore.WorldMineProductionLvl__Title.TranslatedString, TrCore.Unity.TranslatedString), (object) locStr1_46.Format(IdsCore.Messages.TutorialOnCargoShip.TranslatedName(prototypesDb).MakeBold()));
      MessageProto messageProto27 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnWorldEntities, "World structures", content30, InGameMessageType.Tutorial, group: orThrow8));
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto27, prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>(Ids.Technology.OilDrilling)));
      LocStr1 locStr1_47 = Loc.Str1("TutorialOnContracts__part1", "You can establish contracts with settlements to <b>exchange goods on regular basis</b>. Contracts are typically much more lucrative than quick trading deals but they cost Unity and require a dedicated {0}.", "{0} = Cargo ship");
      LocStr4 locStr4_4 = Loc.Str4("TutorialOnContracts__part2", "After you establish a contract, you’ll need a {0} and a {1} with modules fit for the contract. For example, if you’re trading {2} for {3} you’ll need to have both a Unit Module ({2}) and a Fluid Module ({3}) attached to the {1} (1). Select either module, click 'assign a contract' (2), and assign the contract you wish to begin (3). Note that any other attached module will be auto assigned to the appropriate type of material if compatible with the contract.", "{0} = Cargo ship, {1} = Cargo depot, {2} = Food Packs, {3} = Crude Oil");
      LocStr2 locStr2_29 = Loc.Str2("TutorialOnContracts__part3", "Once your {1} modules are supplied with the correct amounts of required goods, the {0} will automatically travel to the settlement to exchange the goods. Contracts enable you to trade as much as you want without any time restriction", "{0} = Cargo Ship, {1} = Cargo depot");
      string format6 = "\r\n[ATTACH] {0}\r\n<IMAGE=Assets/Base/Tutorials/Contracts/Intro.jpg>\r\n\r\n[ATTACH] {1}\r\n<IMAGE=Assets/Base/Tutorials/Contracts/AssignProduct.jpg>\r\n\r\n[ATTACH] {2}\r\n<DIMAGE=Assets/Base/Tutorials/Contracts/Outro.jpg>\r\n";
      string translatedString2 = Ids.Ships.CargoShipT1.GetProto(prototypesDb).Strings.Name.TranslatedString;
      string content31 = string.Format(format6, (object) locStr1_47.Format(translatedString2), (object) locStr4_4.Format(translatedString2, locStr65.TranslatedString, Ids.Products.FoodPack.TranslatedName(prototypesDb), Ids.Products.CrudeOil.TranslatedName(prototypesDb)), (object) locStr2_29.Format(translatedString2, locStr65.TranslatedString));
      MessageProto messageProto28 = prototypesDb.Add<MessageProto>(new MessageProto(IdsCore.Messages.TutorialOnContracts, "Contracts", content31, InGameMessageType.Tutorial, group: orThrow8));
      prototypesDb.Add<MessageTriggerOnProtoUnlockedProto>(new MessageTriggerOnProtoUnlockedProto(messageProto28, prototypesDb.GetOrThrow<Mafi.Core.Prototypes.Proto>((Mafi.Core.Prototypes.Proto.ID) Ids.Buildings.CargoDepotT2)));
    }

    public TutorialMessagesData()
    {
      MBiHIp97M4MqqbtZOh.chMFXj727();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }
  }
}
