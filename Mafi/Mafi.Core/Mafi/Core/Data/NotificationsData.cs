// Decompiled with JetBrains decompiler
// Type: Mafi.Core.Data.NotificationsData
// Assembly: Mafi.Core, Version=0.6.3.0, Culture=neutral, PublicKeyToken=null
// MVID: 2D94E377-7747-46A4-A766-4DF7ABFEBD30
// Assembly location: D:\GameLibrary\SteamLibrary\steamapps\common\Captain of Industry\Captain of Industry_Data\Managed\Mafi.Core.dll
// XML documentation location: D:\GameLibrary\SteamLibrary\steamapps\common\Captain of Industry\Captain of Industry_Data\Managed\Mafi.Core.xml

using eLxG93FZl5M3yHxFGb;
using Mafi.Core.Entities;
using Mafi.Core.Mods;
using Mafi.Core.Notifications;
using Mafi.Core.Prototypes;
using Mafi.Core.World.Entities;
using Mafi.Localization;

#nullable disable
namespace Mafi.Core.Data
{
  internal class NotificationsData : IModData
  {
    public void RegisterData(ProtoRegistrator registrator)
    {
      NotificationProtoBuilder notificationProtoBuilder = registrator.NotificationProtoBuilder;
      notificationProtoBuilder.Start("", IdsCore.Notifications.UpgradeInProgress).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Success).AddIcon("Assets/Unity/UserInterface/EntityIcons/Upgrade.png").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Upgrade.png").HideInNotificationPanel().HideInInspector().BuildAndAdd();
      notificationProtoBuilder.Start("", IdsCore.Notifications.ConstructionPrioritized).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/EntityIcons/Priority.png").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Priority.png", new ColorRgba?((ColorRgba) 15846400)).HideInNotificationPanel().HideInInspector().BuildAndAdd();
      notificationProtoBuilder.Start("{entity} has no resource to extract", IdsCore.Notifications.NoResourceToExtract, "example: 'Groundwater pump has no resource to extract'").SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/Blocked.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").BuildAndAdd();
      notificationProtoBuilder.StartFormatted<Proto>("{0} resource is getting low", IdsCore.Notifications.ResourceIsLow, "example: 'Groundwater resource is getting low'").SetMessageFormatter((NotificationProto<Proto>.NotificationMessageFormatter) ((messageFormat, proto) => messageFormat.FormatInvariant((object) proto.Strings.Name))).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/General/Warning128.png").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Warning.png").BuildAndAdd();
      notificationProtoBuilder.Start("Not enough housing, settlement is overcrowded", IdsCore.Notifications.Homeless).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/PopulationSmall.svg").BuildAndAdd();
      notificationProtoBuilder.StartFormatted<int>("{0} homeless left the island due to lack of food.", IdsCore.Notifications.HomelessLeft).SetType(NotificationType.OneTimeOnly).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/PopulationSmall.svg").BuildAndAdd();
      notificationProtoBuilder.Start("Low food supply!", IdsCore.Notifications.LowFoodSupply).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/General/Food.svg").BuildAndAdd();
      notificationProtoBuilder.Start("People are starving!", IdsCore.Notifications.PopsStarving).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/Food.svg").BuildAndAdd();
      notificationProtoBuilder.StartFormatted<int>("{0} pops died of starvation!", IdsCore.Notifications.PopsStarvedToDeath).SetType(NotificationType.OneTimeOnly).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/PopulationSmall.svg").BuildAndAdd();
      notificationProtoBuilder.StartFormatted<Proto>("Farm: {0} will dry out due to lack of water", IdsCore.Notifications.CropWillDrySoon).SetMessageFormatter((NotificationProto<Proto>.NotificationMessageFormatter) ((messageFormat, crop) => messageFormat.FormatInvariant((object) crop.Strings.Name))).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/Toolbar/Farms.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").SetTutorial(IdsCore.Messages.TutorialOnFarming).BuildAndAdd();
      notificationProtoBuilder.Start("Farm has no crop assigned", IdsCore.Notifications.NoCropToGrow).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/Toolbar/Farms.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").BuildAndAdd();
      notificationProtoBuilder.StartFormatted<Proto>("Farm: {0} lacks workers", IdsCore.Notifications.CropLacksMaintenance).SetMessageFormatter((NotificationProto<Proto>.NotificationMessageFormatter) ((messageFormat, crop) => messageFormat.FormatInvariant((object) crop.Strings.Name))).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/Toolbar/Farms.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Worker.png").BuildAndAdd();
      notificationProtoBuilder.StartFormatted<Proto>("Farm: {0} lost due to lack of water", IdsCore.Notifications.CropDiedNoWater).SetMessageFormatter((NotificationProto<Proto>.NotificationMessageFormatter) ((messageFormat, crop) => messageFormat.FormatInvariant((object) crop.Strings.Name))).SetType(NotificationType.OneTimeOnly).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/Toolbar/Farms.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").SetTutorial(IdsCore.Messages.TutorialOnFarming).BuildAndAdd();
      notificationProtoBuilder.StartFormatted<Proto>("Farm: {0} lost due to lack of fertility", IdsCore.Notifications.CropDiedNoFertility).SetMessageFormatter((NotificationProto<Proto>.NotificationMessageFormatter) ((messageFormat, crop) => messageFormat.FormatInvariant((object) crop.Strings.Name))).SetType(NotificationType.OneTimeOnly).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/Toolbar/Farms.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").SetTutorial(IdsCore.Messages.TutorialOnFarming).BuildAndAdd();
      notificationProtoBuilder.StartFormatted<Proto>("Farm: {0} lost due to lack of workers", IdsCore.Notifications.CropDiedNoMaintenance).SetMessageFormatter((NotificationProto<Proto>.NotificationMessageFormatter) ((messageFormat, crop) => messageFormat.FormatInvariant((object) crop.Strings.Name))).SetType(NotificationType.OneTimeOnly).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/Toolbar/Farms.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Worker.png").BuildAndAdd();
      notificationProtoBuilder.StartFormatted<Proto>("Farm: Could not store all {0} after harvest", IdsCore.Notifications.CropCouldNotBeStored).SetMessageFormatter((NotificationProto<Proto>.NotificationMessageFormatter) ((messageFormat, crop) => messageFormat.FormatInvariant((object) crop.Strings.Name))).SetType(NotificationType.OneTimeOnly).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/Toolbar/Farms.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Storage.svg").BuildAndAdd();
      notificationProtoBuilder.Start("Farm fertility is too low", IdsCore.Notifications.LowFarmFertility).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/Toolbar/Farms.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").SetTutorial(IdsCore.Messages.TutorialOnFarmFertility).BuildAndAdd();
      notificationProtoBuilder.Start("Not enough workers", IdsCore.Notifications.NotEnoughWorkers).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/WorkerSmall.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Worker.png").HideInInspector().BuildAndAdd();
      notificationProtoBuilder.Start("Vehicle is broken as it lacks maintenance", IdsCore.Notifications.VehicleIsBroken).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/Broken128.png").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Broken.png").BuildAndAdd();
      notificationProtoBuilder.Start("Machine is broken as it lacks maintenance", IdsCore.Notifications.MachineIsBroken).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/Broken128.png").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Broken.png").BuildAndAdd();
      notificationProtoBuilder.StartFormatted<Proto>("{entity} cannot deliver {0}. No valid destination", IdsCore.Notifications.TruckCannotDeliver).SetMessageFormatter((NotificationProto<Proto>.NotificationMessageFormatter) ((messageFormat, product) => messageFormat.FormatInvariant((object) product.Strings.Name))).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).HideInNotificationPanel().AddIcon("Assets/Unity/UserInterface/Toolbar/Vehicles.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Storage.svg").SetTutorial(IdsCore.Messages.TutorialOnVehiclesAccessibility).BuildAndAdd();
      notificationProtoBuilder.Start("{entity} has no compatible sorting plant for mixed cargo", IdsCore.Notifications.TruckCannotDeliverMixedCargo).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/Toolbar/Vehicles.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Storage.svg").BuildAndAdd();
      notificationProtoBuilder.Start("{entity} needs to be assigned with products to sort", IdsCore.Notifications.SortingPlantNoProductSet).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/General/Blocked.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").BuildAndAdd();
      notificationProtoBuilder.Start("{entity}: blocked due to full output", IdsCore.Notifications.SortingPlantBlockedOutput).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/General/Blocked.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").BuildAndAdd();
      notificationProtoBuilder.Start("Vehicles can't reach {entity}.", IdsCore.Notifications.EntityCannotBeReached).SetExtraMessageForInspector((LocStrFormatted) TrCore.EntityCannotBeReachedDesc).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).HideInNotificationPanel().AddIcon("Assets/Unity/UserInterface/Toolbar/NoGoal.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/NoGoal.png").BuildAndAdd();
      notificationProtoBuilder.Start("{entity} has no compatible excavator", IdsCore.Notifications.TruckHasNoValidExcavator).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/General/Blocked.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").SetTutorial(IdsCore.Messages.TutorialOnMineTower).BuildAndAdd();
      notificationProtoBuilder.Start("{entity} has no compatible truck", IdsCore.Notifications.ExcavatorHasNoValidTruck).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/General/Blocked.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").SetTutorial(IdsCore.Messages.TutorialOnMineTower).BuildAndAdd();
      notificationProtoBuilder.Start("{entity} has no truck assigned", IdsCore.Notifications.NoTruckAssignedToTreeHarvester).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/General/Blocked.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").SetTutorial(IdsCore.Messages.TutorialTreeHarvesting).BuildAndAdd();
      notificationProtoBuilder.Start("{entity} has no trees to harvest", IdsCore.Notifications.NoTreesToHarvest).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/General/Blocked.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/TreeCut.png").BuildAndAdd();
      notificationProtoBuilder.Start("{entity} cannot reach destination.", IdsCore.Notifications.VehicleGoalUnreachable).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/Toolbar/NoGoal.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/NoGoal.png").SetTutorial(IdsCore.Messages.TutorialOnVehiclesAccessibility).BuildAndAdd();
      notificationProtoBuilder.Start("{entity} cannot reach destination.", IdsCore.Notifications.VehicleGoalUnreachableCannotGoUnder).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/Toolbar/NoGoal.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/NoGoal.png").SetExtraMessageForInspector((LocStrFormatted) TrCore.ThisVehicleCannotDriveUnderTransports).SetTutorial(IdsCore.Messages.TutorialOnVehiclesAccessibility).BuildAndAdd();
      notificationProtoBuilder.Start("{entity} is struggling to find a destination it can reach.", IdsCore.Notifications.VehicleGoalStruggling).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/Toolbar/NoGoal.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/NoGoal.png").SetTutorial(IdsCore.Messages.TutorialOnVehiclesAccessibility).BuildAndAdd();
      notificationProtoBuilder.Start("{entity} is struggling to find a destination it can reach.", IdsCore.Notifications.VehicleGoalStrugglingCannotGoUnder).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/Toolbar/NoGoal.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/NoGoal.png").SetExtraMessageForInspector((LocStrFormatted) TrCore.ThisVehicleCannotDriveUnderTransports).SetTutorial(IdsCore.Messages.TutorialOnVehiclesAccessibility).BuildAndAdd();
      notificationProtoBuilder.Start("{entity} has no fuel", IdsCore.Notifications.VehicleNoFuel).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/FuelTank128.png").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/FuelTank.png").BuildAndAdd();
      notificationProtoBuilder.Start("Groundwater is low", IdsCore.Notifications.LowGroundwater).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/General/Electricity.svg").BuildAndAdd();
      notificationProtoBuilder.Start("Not enough electricity", IdsCore.Notifications.NotEnoughElectricity).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/Electricity.svg").BuildAndAdd();
      notificationProtoBuilder.Start("", IdsCore.Notifications.NotEnoughElectricityForEntity).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).HideInNotificationPanel().HideInInspector().AddIcon("Assets/Unity/UserInterface/General/Electricity.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Electricity.png").BuildAndAdd();
      notificationProtoBuilder.Start("", IdsCore.Notifications.NotEnoughComputingForEntity).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).HideInNotificationPanel().AddIcon("Assets/Unity/UserInterface/General/Computing128.png").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Computing.png").HideInInspector().BuildAndAdd();
      notificationProtoBuilder.Start("Not enough fuel to refuel a vehicle", IdsCore.Notifications.NotEnoughFuelToRefuel).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/FuelTank128.png").BuildAndAdd();
      notificationProtoBuilder.Start("{entity} is out of fuel", IdsCore.Notifications.FuelStationOutOfFuel).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/FuelTank.png").AddIcon("Assets/Unity/UserInterface/General/FuelTank128.png").BuildAndAdd();
      notificationProtoBuilder.Start("{entity} has no fuel pipe connected", IdsCore.Notifications.FuelStationNotConnected).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).HideInNotificationPanel().AddIcon("Assets/Unity/UserInterface/General/Blocked.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").BuildAndAdd();
      notificationProtoBuilder.Start("{entity} has no mining designations in its area", IdsCore.Notifications.NoMineDesignInTowerArea).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/Toolbar/Vehicles.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Designation.png").SetTutorial(IdsCore.Messages.TutorialOnMineTower).BuildAndAdd();
      notificationProtoBuilder.Start("{entity} has no available designations to be mined in its area", IdsCore.Notifications.NoAvailableMineDesignInTowerArea).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/Toolbar/Vehicles.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Designation.png").SetTutorial(IdsCore.Messages.TutorialOnMineTower).BuildAndAdd();
      notificationProtoBuilder.Start("{entity} has no forestry designations in its area", IdsCore.Notifications.NoForestryDesignInTowerArea).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/EntityIcons/Sapling.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Designation.png").SetTutorial(IdsCore.Messages.TutorialOnTreesPlanting).BuildAndAdd();
      notificationProtoBuilder.Start("{entity} has no tree saplings to plant trees with", IdsCore.Notifications.NoTreeSaplingsForPlanter).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/EntityIcons/Sapling.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Sapling.svg").SetTutorial(IdsCore.Messages.TutorialOnTreesPlanting).HideInNotificationPanel().BuildAndAdd();
      notificationProtoBuilder.Start("{entity}: No available place to dump products", IdsCore.Notifications.CannotDeliverFromMineTower).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/Toolbar/Vehicles.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Storage.svg").BuildAndAdd();
      notificationProtoBuilder.Start("{entity} has no reachable terrain designations", IdsCore.Notifications.VehicleNoReachableDesignations).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/Toolbar/Vehicles.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Designation.png").BuildAndAdd();
      notificationProtoBuilder.Start("There are some mining designations outside of mine tower areas", IdsCore.Notifications.AreasWithoutTowers).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/EntityIcons/Designation.png").BuildAndAdd();
      notificationProtoBuilder.Start("There are some forestry designations outside of forestry tower areas", IdsCore.Notifications.AreasWithoutForestryTowers).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/EntityIcons/Designation.png").BuildAndAdd();
      notificationProtoBuilder.Start("{entity} has no recipe selected", IdsCore.Notifications.NoRecipeSelected).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/General/Working128.png").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Gears.png").HideInInspector().BuildAndAdd();
      notificationProtoBuilder.StartFormatted<Proto>("{entity} needs a transport to output {0}", IdsCore.Notifications.NeedsTransportConnected).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).SetMessageFormatter((NotificationProto<Proto>.NotificationMessageFormatter) ((messageFormat, product) => messageFormat.FormatInvariant((object) product.Strings.Name))).AddIcon("Assets/Unity/UserInterface/General/Blocked.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").BuildAndAdd();
      notificationProtoBuilder.Start("{entity} is too long", IdsCore.Notifications.TransportTooLong).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/Warning128.png").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Warning.png").SetExtraMessageForInspector((LocStrFormatted) TrCore.TransportTooLong__HowToResolve).BuildAndAdd();
      notificationProtoBuilder.Start("", IdsCore.Notifications.EntityIsBoosted).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Success).HideInNotificationPanel().AddIcon("Assets/Unity/UserInterface/General/UnitySmall.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Boost.png", new ColorRgba?(new ColorRgba(10817783))).HideInInspector().BuildAndAdd();
      notificationProtoBuilder.StartFormatted<EntityProto>("Done loading cargo for {0}", IdsCore.Notifications.ShipCargoLoaded).SetMessageFormatter((NotificationProto<EntityProto>.NotificationMessageFormatter) ((messageFormat, entityProto) => messageFormat.FormatInvariant((object) entityProto.Strings.Name))).SetType(NotificationType.OneTimeOnly).SetStyle(NotificationStyle.Success).AddIcon("Assets/Unity/UserInterface/Toolbar/Battleship128.png").BuildAndAdd();
      notificationProtoBuilder.StartFormatted<EntityProto>("Ship delivered cargo to {0}", IdsCore.Notifications.ShipCargoDelivered).SetMessageFormatter((NotificationProto<EntityProto>.NotificationMessageFormatter) ((messageFormat, entity) => messageFormat.FormatInvariant((object) entity.Strings.Name))).SetType(NotificationType.OneTimeOnly).SetStyle(NotificationStyle.Success).AddIcon("Assets/Unity/UserInterface/Toolbar/Battleship128.png").BuildAndAdd();
      notificationProtoBuilder.Start("Ship was fully repaired", IdsCore.Notifications.ShipRepaired).SetType(NotificationType.OneTimeOnly).SetStyle(NotificationStyle.Success).AddIcon("Assets/Unity/UserInterface/Toolbar/Battleship128.png").BuildAndAdd();
      notificationProtoBuilder.Start("Ship modifications complete", IdsCore.Notifications.ShipModified).SetType(NotificationType.OneTimeOnly).SetStyle(NotificationStyle.Success).AddIcon("Assets/Unity/UserInterface/Toolbar/Battleship128.png").BuildAndAdd();
      notificationProtoBuilder.Start("Ocean access is blocked", IdsCore.Notifications.OceanAccessBlocked).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/Blocked.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").BuildAndAdd();
      notificationProtoBuilder.StartFormatted<WorldMapMineProto>("{0} was fully repaired", IdsCore.Notifications.WorldEntityRepaired).SetMessageFormatter((NotificationProto<WorldMapMineProto>.NotificationMessageFormatter) ((messageFormat, entityProto) => messageFormat.FormatInvariant((object) entityProto.Strings.Name))).SetType(NotificationType.OneTimeOnly).SetStyle(NotificationStyle.Success).AddIcon("Assets/Unity/UserInterface/Toolbar/WorldMap.svg").BuildAndAdd();
      notificationProtoBuilder.Start("{entity} is low on fuel", IdsCore.Notifications.CargoShipMissingFuel).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/Toolbar/CargoShip.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/FuelTank.png").BuildAndAdd();
      notificationProtoBuilder.Start("Not enough unity to perform assigned contract", IdsCore.Notifications.CargoShipContractLacksUpoints).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).HideInNotificationPanel().AddIcon("Assets/Unity/UserInterface/General/UnitySmall.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Boost.png").BuildAndAdd();
      notificationProtoBuilder.Start("Cargo depot has no cargo ship", IdsCore.Notifications.CargoDepotHasNoShip).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/Toolbar/CargoShip.svg").AddEntityIcon("Assets/Unity/UserInterface/Toolbar/CargoShip.svg").BuildAndAdd();
      notificationProtoBuilder.Start("Cargo depot has no module available", IdsCore.Notifications.CargoDepotHasNoModule).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/Toolbar/CargoShip.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").BuildAndAdd();
      notificationProtoBuilder.Start("Not enough Unity", IdsCore.Notifications.NotEnoughUpoints).SetType(NotificationType.OneTimeOnly).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/UnitySmall.svg").BuildAndAdd();
      notificationProtoBuilder.Start("{entity} has not enough Unity", IdsCore.Notifications.NotEnoughUpointsForEntity).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/UnitySmall.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Boost.png").BuildAndAdd();
      notificationProtoBuilder.Start("Current research is too advanced for our lab", IdsCore.Notifications.LabCannotResearchHigherTech).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/Toolbar/Research.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").BuildAndAdd();
      notificationProtoBuilder.Start("This lab requires a consumable input product in order to work", IdsCore.Notifications.LabMissingInputProducts).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).HideInNotificationPanel().AddIcon("Assets/Unity/UserInterface/Toolbar/Research.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").BuildAndAdd();
      notificationProtoBuilder.StartFormatted<Proto>("Not enough {0}", IdsCore.Notifications.NotEnoughMaintenance).SetMessageFormatter((NotificationProto<Proto>.NotificationMessageFormatter) ((messageFormat, productProto) => messageFormat.FormatInvariant((object) productProto.Strings.Name))).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/Warning128.png").BuildAndAdd();
      notificationProtoBuilder.Start("Settlement has no food market!", IdsCore.Notifications.SettlementHasNoFoodModule).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/Food.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Food.png").BuildAndAdd();
      notificationProtoBuilder.Start("Settlement is starving!", IdsCore.Notifications.SettlementIsStarving).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).HideInNotificationPanel().AddIcon("Assets/Unity/UserInterface/General/Food.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Food.png").BuildAndAdd();
      notificationProtoBuilder.Start("Settlement is full of trash", IdsCore.Notifications.SettlementFullOfLandfill).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/General/Trash128.png").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Storage.svg").BuildAndAdd();
      notificationProtoBuilder.Start("{entity} has no product assigned", IdsCore.Notifications.NoProductAssignedToEntity).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/General/Blocked.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").BuildAndAdd();
      notificationProtoBuilder.Start("No product assigned to cargo module", IdsCore.Notifications.CargoDepotModuleNoProductAssigned).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/Toolbar/CargoShip.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Storage.svg").SetTutorial(IdsCore.Messages.TutorialOnCargoShip).BuildAndAdd();
      notificationProtoBuilder.Start("Cargo depot module is not compatible with the assigned contract", IdsCore.Notifications.CargoDepotModuleContractNotMatching).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).HideInNotificationPanel().AddIcon("Assets/Unity/UserInterface/Toolbar/CargoShip.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Storage.svg").BuildAndAdd();
      notificationProtoBuilder.StartFormatted<string>("Error: {0}", IdsCore.Notifications.NewErrorOccurred).SetMessageFormatter((NotificationProto<string>.NotificationMessageFormatter) ((messageFormat, errorMsg) => messageFormat.FormatInvariant((object) errorMsg))).SetType(NotificationType.OneTimeOnly).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/Warning128.png").BuildAndAdd();
      notificationProtoBuilder.Start("Nuclear reactor reached critical temperature and is shutting down!", IdsCore.Notifications.NuclearReactorInMeltdown).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/Radiation.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Radiation.png").SetExtraMessageForInspector((LocStrFormatted) TrCore.NuclearReactor__Overheated).BuildAndAdd();
      notificationProtoBuilder.Start("", IdsCore.Notifications.NuclearReactorLacksMaintenance).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/General/Broken128.png").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Broken.png").SetExtraMessageForInspector((LocStrFormatted) TrCore.NuclearReactor__NotEnoughMaintenance).HideInNotificationPanel().BuildAndAdd();
      notificationProtoBuilder.StartFormatted<Proto>("Alert: {entity} has low supply of {0}", IdsCore.Notifications.StorageSupplyTooLow).SetMessageFormatter((NotificationProto<Proto>.NotificationMessageFormatter) ((messageFormat, proto) => messageFormat.FormatInvariant((object) proto.Strings.Name))).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/EntityIcons/Storage.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Warning.png").BuildAndAdd();
      notificationProtoBuilder.StartFormatted<Proto>("Alert: {entity} has high supply of {0}", IdsCore.Notifications.StorageSupplyTooHigh).SetMessageFormatter((NotificationProto<Proto>.NotificationMessageFormatter) ((messageFormat, proto) => messageFormat.FormatInvariant((object) proto.Strings.Name))).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/EntityIcons/Storage.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Warning.png").BuildAndAdd();
      notificationProtoBuilder.Start("Building {entity} may collapse due to uneven terrain", IdsCore.Notifications.EntityMayCollapseUnevenTerrain).SetType(NotificationType.Continuous).SetSuppressEntityIconOnSuppress().SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/General/BuildingCollapse.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/BuildingCollapse.svg").SetTutorial(IdsCore.Messages.TutorialOnRetainingWalls).BuildAndAdd();
      notificationProtoBuilder.Start("{entity}: Not enough food", IdsCore.Notifications.AnimalFarmMissingFood).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/Blocked.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").BuildAndAdd();
      notificationProtoBuilder.Start("{entity}: Not enough water", IdsCore.Notifications.AnimalFarmMissingWater).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/Blocked.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").BuildAndAdd();
      notificationProtoBuilder.Start("{entity}: Invalid route assigned.", IdsCore.Notifications.InvalidImportRoute).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/General/Blocked.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").SetExtraMessageForInspector(TrCore.InvalidImportRouteSuffix.Format(TrCore.StoredProduct__KeepEmpty)).SetTutorial(IdsCore.Messages.TutorialOnAdvancedLogistics).BuildAndAdd();
      notificationProtoBuilder.Start("{entity}: Invalid route assigned.", IdsCore.Notifications.InvalidExportRoute).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/General/Blocked.svg").AddEntityIcon("Assets/Unity/UserInterface/EntityIcons/Blocked.png").SetExtraMessageForInspector(TrCore.InvalidExportRouteSuffix.Format(TrCore.StoredProduct__KeepFull)).SetTutorial(IdsCore.Messages.TutorialOnAdvancedLogistics).BuildAndAdd();
      notificationProtoBuilder.StartFormatted<Proto>("Loan payment is overdue ({0})", IdsCore.Notifications.LoanPaymentDelayed).SetMessageFormatter((NotificationProto<Proto>.NotificationMessageFormatter) ((messageFormat, proto) => messageFormat.FormatInvariant((object) proto.Strings.Name))).SetType(NotificationType.Continuous).SetStyle(NotificationStyle.Warning).AddIcon("Assets/Unity/UserInterface/General/Loans.svg").BuildAndAdd();
      notificationProtoBuilder.StartFormatted<Proto>("Failed to collect payment for loan ({0})", IdsCore.Notifications.LoanPaymentFailed).SetMessageFormatter((NotificationProto<Proto>.NotificationMessageFormatter) ((messageFormat, proto) => messageFormat.FormatInvariant((object) proto.Strings.Name))).SetType(NotificationType.OneTimeOnly).SetStyle(NotificationStyle.Critical).AddIcon("Assets/Unity/UserInterface/General/Loans.svg").BuildAndAdd();
    }

    public NotificationsData()
    {
      MBiHIp97M4MqqbtZOh.rMWAw2OR8();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }
  }
}
